using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

// Token: 0x02000001 RID: 1
internal class <Module>
{
	// Token: 0x06000001 RID: 1 RVA: 0x0000E4E0 File Offset: 0x0000C6E0
	static <Module>()
	{
		<Module>.smethod_7();
		uint num = 4032U;
		uint[] array = new uint[]
		{
			2340441206U,
			1429608485U,
			26127402U,
			2421289823U,
			3004704142U,
			3634473087U,
			3143881507U,
			34806633U,
			482347669U,
			3949713416U,
			1280136806U,
			648008567U,
			329205350U,
			3295357240U,
			1859317262U,
			3395754068U,
			3725757863U,
			2658007080U,
			374048677U,
			3722871179U,
			776139056U,
			2964448273U,
			2225808537U,
			3271597708U,
			865802802U,
			2371741834U,
			400940867U,
			1025330060U,
			1582963345U,
			3323751646U,
			2337267100U,
			162631988U,
			244887215U,
			497356780U,
			2682672116U,
			194492748U,
			904424615U,
			1137443164U,
			3302991811U,
			1568281153U,
			3844382546U,
			2931695326U,
			2313508032U,
			2013371926U,
			1891226606U,
			1263518902U,
			2260994867U,
			413735455U,
			1258563853U,
			1357951606U,
			2336688906U,
			4067160020U,
			3826094846U,
			407856828U,
			3736082122U,
			2821687799U,
			3156457830U,
			649192610U,
			3079192182U,
			3085724115U,
			2141114779U,
			1875397705U,
			1056941790U,
			3456290350U,
			3106553777U,
			2447446539U,
			720809281U,
			3801074901U,
			1452174918U,
			4250817658U,
			3822609273U,
			152727167U,
			4011887271U,
			3998039309U,
			113019160U,
			864855720U,
			2572982293U,
			2556381365U,
			555897449U,
			3467080926U,
			176390942U,
			3709363825U,
			404987966U,
			3110189721U,
			2248673517U,
			1169559057U,
			2380259275U,
			292892902U,
			1839265591U,
			3967708985U,
			885926847U,
			2173588268U,
			795693505U,
			2034916246U,
			2609921994U,
			2567177549U,
			1214559479U,
			2565834168U,
			726748069U,
			839156543U,
			3303667306U,
			4020178478U,
			4005425895U,
			1915704597U,
			1396938839U,
			2340914110U,
			3280305990U,
			2611376525U,
			1129585876U,
			1362777800U,
			297605427U,
			307251971U,
			3192895314U,
			1269951400U,
			2773515986U,
			378911894U,
			3950321445U,
			3928821586U,
			3763082146U,
			1851338779U,
			3110113118U,
			1243438422U,
			2643788705U,
			2817979335U,
			2226845717U,
			1155574211U,
			295124389U,
			419316319U,
			3646131576U,
			3949320138U,
			2891585034U,
			3082743547U,
			633611967U,
			697224849U,
			1220914236U,
			2392008605U,
			3249024496U,
			2796328613U,
			20179095U,
			2045750767U,
			2596907761U,
			1866003678U,
			2068736658U,
			4280615681U,
			4245253307U,
			3407117809U,
			1703948338U,
			2302351082U,
			1951957420U,
			947216564U,
			68975175U,
			3909447426U,
			3616571011U,
			464660979U,
			3200951707U,
			572128271U,
			3859651633U,
			828828415U,
			3319995608U,
			2844820731U,
			2463154109U,
			373706989U,
			2504723070U,
			4050327936U,
			1830305614U,
			1694024642U,
			1725507182U,
			2871873404U,
			958436237U,
			86655184U,
			2989875120U,
			3086880883U,
			2789280507U,
			673354316U,
			2727696216U,
			2405537846U,
			2459017486U,
			1663418595U,
			1135073867U,
			1508301076U,
			1852170770U,
			1656321755U,
			181052782U,
			3054740113U,
			2296568234U,
			45593918U,
			462488961U,
			4171419778U,
			1359765698U,
			3638837084U,
			3632915235U,
			3084117751U,
			276819613U,
			1171233066U,
			2379410817U,
			1330352433U,
			1450749296U,
			4261577760U,
			1872624468U,
			3399353851U,
			2850683051U,
			3549193915U,
			4220033086U,
			711184904U,
			3338197108U,
			3483335799U,
			374777298U,
			2742798609U,
			4185202107U,
			2941935714U,
			2184536977U,
			3880683863U,
			2722740612U,
			3046214928U,
			1092755287U,
			3198051038U,
			744759885U,
			2950699397U,
			995069658U,
			1597511027U,
			441565750U,
			85180584U,
			3789922457U,
			2365796243U,
			1246343790U,
			3759650452U,
			4067910555U,
			570329336U,
			572081313U,
			862064104U,
			2349054766U,
			2618103940U,
			84886238U,
			965098832U,
			592591468U,
			3428521342U,
			3707466724U,
			2828671075U,
			3880774760U,
			3654922726U,
			1451270256U,
			3725795801U,
			1917643927U,
			2656119866U,
			3154362505U,
			752673798U,
			1942702093U,
			2770681029U,
			378350074U,
			4168106197U,
			2327585284U,
			680193338U,
			2457142249U,
			2642899341U,
			2300722950U,
			3787082215U,
			3087833798U,
			3690739932U,
			3077492992U,
			1606160739U,
			2495209844U,
			289163378U,
			1893310141U,
			3452638858U,
			2564552386U,
			1218459682U,
			2042482288U,
			1128137397U,
			1738914692U,
			2460354250U,
			1071169106U,
			778577849U,
			1479696757U,
			4134773528U,
			2240832710U,
			814167710U,
			1379499079U,
			1938108816U,
			2173780377U,
			1525704396U,
			2104745224U,
			1841455108U,
			1487805969U,
			3515669996U,
			2960941985U,
			1309717167U,
			3587018031U,
			3980636813U,
			3241443202U,
			3455848474U,
			2173657774U,
			196119105U,
			2815729031U,
			1823339178U,
			1100207028U,
			1168886721U,
			4090096282U,
			1167351830U,
			3652066784U,
			1195826841U,
			441649078U,
			1539341357U,
			1112140854U,
			2830887847U,
			4099468918U,
			2507832183U,
			1014803048U,
			1783331830U,
			1598625467U,
			2343346687U,
			2345114972U,
			1880420454U,
			3335114554U,
			631148714U,
			2410647407U,
			2855434940U,
			600637206U,
			3433347126U,
			195989191U,
			3882523311U,
			1094965222U,
			4010450989U,
			3674911229U,
			3536175197U,
			1277339849U,
			2339298149U,
			248817293U,
			880122502U,
			2626326761U,
			1211534210U,
			4155897051U,
			1258440929U,
			2082820328U,
			1374976090U,
			4056675387U,
			61383350U,
			153979762U,
			2635980722U,
			1013523622U,
			2163653005U,
			3962191668U,
			952905190U,
			2862782328U,
			124044384U,
			1329198348U,
			2143404199U,
			2482628833U,
			261332094U,
			4002135954U,
			1836595364U,
			1704057083U,
			3319012285U,
			965407889U,
			2632237564U,
			728480412U,
			1355315574U,
			1602308614U,
			17052172U,
			4140265274U,
			2846701627U,
			857450956U,
			1474673305U,
			4130033339U,
			540944372U,
			3041892973U,
			3131996030U,
			2622230710U,
			2385548613U,
			2986730661U,
			4095494064U,
			1591625367U,
			268314540U,
			2216939929U,
			1504789454U,
			1410024890U,
			4252323551U,
			2644418776U,
			3162252945U,
			1218047510U,
			2951697399U,
			3571492168U,
			3943210436U,
			2344313772U,
			1059607536U,
			3241790523U,
			3672561664U,
			4099769295U,
			3804998770U,
			4284617352U,
			1439029550U,
			534144631U,
			736146617U,
			768924480U,
			4264223615U,
			2225863149U,
			2945218956U,
			311928067U,
			2584322097U,
			4242926502U,
			1987710114U,
			4279074321U,
			13745637U,
			1224921390U,
			1607536697U,
			3659502412U,
			969258525U,
			3992196666U,
			434244135U,
			961023441U,
			258686624U,
			4162898991U,
			2708357523U,
			571859702U,
			3941913025U,
			981104054U,
			2289758400U,
			4262326433U,
			2511295348U,
			840399985U,
			4047949151U,
			252134992U,
			4083216142U,
			2005943246U,
			2007215607U,
			1135262276U,
			1951977544U,
			3786755036U,
			2949263297U,
			1728553456U,
			313329353U,
			1552522789U,
			2447627241U,
			4277586251U,
			3077329728U,
			304633213U,
			585127642U,
			1677035207U,
			3445634110U,
			2106272315U,
			2523313014U,
			116574474U,
			691446058U,
			1688622352U,
			2701064374U,
			2774055985U,
			1955589421U,
			3179522151U,
			2118965260U,
			2988284868U,
			1117175926U,
			2131640652U,
			1520642709U,
			2518590717U,
			2689666811U,
			2831720348U,
			398307784U,
			4234586230U,
			2882225581U,
			476427255U,
			2092632265U,
			3123482139U,
			220042666U,
			2045625475U,
			873861368U,
			3108858730U,
			2591863301U,
			3941766642U,
			3768271953U,
			446650528U,
			2103351763U,
			3032604077U,
			843285432U,
			2987228878U,
			781803216U,
			4004985556U,
			2730104029U,
			3549156643U,
			972704870U,
			2583121086U,
			1260562443U,
			266297340U,
			4004643686U,
			1516626632U,
			634008210U,
			2801632991U,
			4277656584U,
			1981890996U,
			3825518022U,
			4148517984U,
			472878191U,
			3587867591U,
			2140087729U,
			2707548792U,
			2797020336U,
			3994358175U,
			2275632995U,
			1535523534U,
			4241390051U,
			1528893433U,
			2035608175U,
			35895303U,
			1330049331U,
			3315366997U,
			334506334U,
			1060858141U,
			2070427033U,
			2522609418U,
			3600204362U,
			53075739U,
			4283550601U,
			4235601096U,
			955878404U,
			2753634146U,
			1417254521U,
			1393440111U,
			4180977836U,
			1623709171U,
			1705207158U,
			3839942753U,
			4046776536U,
			3673044837U,
			3728906505U,
			1228641279U,
			4243973824U,
			2883427641U,
			1893926572U,
			3061366389U,
			3334975631U,
			4104001666U,
			2762953899U,
			2243164967U,
			609979579U,
			3806276707U,
			416055781U,
			1352988255U,
			1782759017U,
			2646495414U,
			2161055669U,
			989310463U,
			1733628223U,
			4009830233U,
			1829577195U,
			2346979973U,
			2371593133U,
			770720686U,
			1795156385U,
			70419503U,
			3847040879U,
			1481854952U,
			2335671167U,
			3199875456U,
			234050294U,
			1316262160U,
			1258143562U,
			1985832489U,
			1336934455U,
			3469478365U,
			2004542066U,
			1319482973U,
			1952186945U,
			2997101718U,
			910562788U,
			4076966584U,
			2373378953U,
			479517132U,
			1462341185U,
			2956877289U,
			3593801081U,
			805863848U,
			886859893U,
			3843781042U,
			1344637399U,
			3540151083U,
			960610384U,
			2417664191U,
			1122122182U,
			103125059U,
			2595049555U,
			2037351598U,
			148867927U,
			2014590167U,
			2854211496U,
			2146414415U,
			3414394562U,
			3429973832U,
			1435033062U,
			2935011267U,
			2259714570U,
			4079935055U,
			615175100U,
			1726044313U,
			578701465U,
			2589965016U,
			2761274265U,
			2556837269U,
			4011199107U,
			3527057510U,
			459873420U,
			2683413119U,
			888913931U,
			147097279U,
			3418081399U,
			1209935170U,
			449342826U,
			3309608462U,
			4143286338U,
			3667491421U,
			3120079668U,
			2846216314U,
			3591108879U,
			3637514590U,
			574661641U,
			3243202916U,
			919297980U,
			547123352U,
			3934138727U,
			211491589U,
			1518425774U,
			421981051U,
			720353593U,
			3151120044U,
			2799880492U,
			3145706291U,
			3187571947U,
			3032271532U,
			2507078179U,
			23703708U,
			341953499U,
			3635669588U,
			1184618253U,
			2316115266U,
			3052930267U,
			2439196866U,
			3168651094U,
			2231324396U,
			2142605944U,
			2563948565U,
			89073022U,
			4191411131U,
			1140237921U,
			218132497U,
			1585205793U,
			4159404915U,
			3507457397U,
			1508882942U,
			551751106U,
			1583847628U,
			408722711U,
			3214673430U,
			1772587084U,
			1468113303U,
			3457887451U,
			1353033461U,
			1533729487U,
			2285132885U,
			1283771150U,
			3992123835U,
			1392598002U,
			2757452328U,
			2428182076U,
			2043230078U,
			1909448803U,
			1336800930U,
			4206540106U,
			479037460U,
			4235203508U,
			4201908986U,
			729272431U,
			3362854599U,
			3865437183U,
			1101153392U,
			2656728196U,
			3942125631U,
			3083656196U,
			1580471715U,
			3739316733U,
			4271003443U,
			1406803518U,
			3516281045U,
			4253697955U,
			534590026U,
			3811969590U,
			1130513396U,
			3907568063U,
			960348485U,
			790862858U,
			721416699U,
			1076483640U,
			2434404929U,
			564835327U,
			3095696123U,
			2009469241U,
			1833481498U,
			3405433563U,
			1098944774U,
			3858697819U,
			770094294U,
			1312890666U,
			3783478339U,
			3601896927U,
			3456649172U,
			2687029448U,
			3265990630U,
			2542745679U,
			504492916U,
			2817818672U,
			1362980132U,
			3651080142U,
			3251661750U,
			4021449328U,
			1934863957U,
			2969655424U,
			4170423446U,
			3522230732U,
			3696040732U,
			2166666718U,
			3196856020U,
			2814677638U,
			2426975313U,
			1361409926U,
			3387326329U,
			2715581094U,
			1853354592U,
			1654461824U,
			3344892605U,
			1827483382U,
			1626485012U,
			2785871487U,
			1004125141U,
			1386857186U,
			1945907702U,
			3471605916U,
			4032840688U,
			1301125420U,
			1912201251U,
			1227173494U,
			3684708165U,
			3543607618U,
			2494864733U,
			2200914752U,
			193046681U,
			577336768U,
			977257908U,
			3693444926U,
			772830746U,
			521666775U,
			494334282U,
			557323522U,
			2818541011U,
			52616574U,
			169074670U,
			2007793537U,
			1171989124U,
			2155164027U,
			1706031628U,
			4171881700U,
			4291899208U,
			3175892355U,
			3327384002U,
			1949530584U,
			2079231771U,
			849519152U,
			3390494313U,
			2217205709U,
			3830440057U,
			3816893133U,
			4032323638U,
			1295193695U,
			2064611365U,
			1889449709U,
			1759610870U,
			2166897984U,
			698491540U,
			833564890U,
			1403474132U,
			1011309255U,
			2030162646U,
			2662056151U,
			1262992172U,
			2869076526U,
			2417331535U,
			4001050739U,
			109126100U,
			3098730563U,
			1504513560U,
			137980430U,
			1233174047U,
			3185614775U,
			2419646516U,
			4246368864U,
			1387824272U,
			1614810382U,
			2786413357U,
			2942330678U,
			3892477159U,
			1987990430U,
			742436362U,
			3551838740U,
			2835226487U,
			3952383845U,
			2469861282U,
			912323870U,
			3172923850U,
			2127691798U,
			283121862U,
			3348743058U,
			1626242182U,
			3572281202U,
			4025520133U,
			3896472887U,
			1459668634U,
			2831633820U,
			849897580U,
			3886588716U,
			3243467333U,
			2155079808U,
			1572334023U,
			3662493868U,
			4191658774U,
			4283546367U,
			3502278166U,
			1875773863U,
			2881585763U,
			1174794957U,
			1393214343U,
			1956391721U,
			2635829611U,
			467271890U,
			239522242U,
			1157948773U,
			2047896854U,
			87467767U,
			1084717036U,
			1720041576U,
			2682339829U,
			1464445545U,
			4027923068U,
			4136761034U,
			3299228463U,
			803534663U,
			3379451257U,
			4157537835U,
			1466228255U,
			4217650401U,
			1017568460U,
			365915528U,
			205262304U,
			4036138591U,
			638854719U,
			2143775378U,
			2279661210U,
			333427860U,
			973032121U,
			2956238460U,
			1680389755U,
			1004354086U,
			329502414U,
			109472513U,
			4202992437U,
			3551575025U,
			1883472858U,
			592024405U,
			503213786U,
			3225827089U,
			32105551U,
			3609153561U,
			2917577092U,
			1850630719U,
			4248106630U,
			1055491073U,
			145895111U,
			3774831767U,
			2727927365U,
			1867196989U,
			3892208047U,
			729490221U,
			1026304713U,
			3843144499U,
			2733827652U,
			3746557503U,
			3030320422U,
			2507405355U,
			391887743U,
			4049679327U,
			3051371904U,
			4262668237U,
			1136998451U,
			165926848U,
			931345288U,
			1856486677U,
			1343710425U,
			2168904975U,
			4062999850U,
			732597883U,
			836296888U,
			587530390U,
			928699672U,
			3208431500U,
			1971935943U,
			844236519U,
			2459544904U,
			3194017577U,
			2603987962U,
			383597740U,
			3814757075U,
			3131391838U,
			3268174278U,
			210762368U,
			2957784647U,
			2489324852U,
			423825857U,
			1580410218U,
			3156290187U,
			423043800U,
			1204025262U,
			723722838U,
			2740812004U,
			287477374U,
			1073140476U,
			1058658344U,
			2041580357U,
			2932800586U,
			895299221U,
			2101089522U,
			1645755611U,
			2508550282U,
			2187650365U,
			3661054146U,
			2190332044U,
			1564507921U,
			3999335808U,
			1638449663U,
			4242497685U,
			270172638U,
			4073757858U,
			2619851541U,
			2350713417U,
			3532720565U,
			4185285750U,
			4079450294U,
			2227823035U,
			1671114804U,
			408214094U,
			2042171539U,
			1886392356U,
			358098882U,
			866648797U,
			710276987U,
			640521913U,
			382367652U,
			2559704016U,
			2178924384U,
			1500661499U,
			1197438704U,
			4240960039U,
			591169259U,
			863161281U,
			2824323295U,
			1254398570U,
			1570421582U,
			3040858467U,
			593315151U,
			2813226847U,
			4009203863U,
			3183988033U,
			2758861124U,
			4237707224U,
			2439081852U,
			3637414286U,
			3464642260U,
			2278444691U,
			2857421825U,
			4045825769U,
			891817093U,
			3029442820U,
			3707652272U,
			3725908887U,
			1999114606U,
			3431791046U,
			2699903303U,
			2199934422U,
			920904397U,
			132558167U,
			2376936176U,
			517510806U,
			3370417296U,
			792503162U,
			3364600941U,
			3184875063U,
			561163800U,
			2025911318U,
			2318859758U,
			3463344920U,
			454426832U,
			3789084055U,
			3023051160U,
			1657906236U,
			1650675965U,
			2887586694U,
			732757892U,
			2794515218U,
			1240879652U,
			2846455852U,
			1284378715U,
			3612231319U,
			2152245768U,
			1141060910U,
			1862305632U,
			935580969U,
			3049060622U,
			2919189290U,
			153547320U,
			3267067793U,
			180935847U,
			2148384869U,
			666253744U,
			554882489U,
			740862685U,
			1396366615U,
			4132220204U,
			3762735510U,
			737670808U,
			3093693515U,
			1902591927U,
			645021186U,
			648660370U,
			1151211329U,
			557150889U,
			2823203501U,
			3213288610U,
			1385479895U,
			3403277923U,
			487827561U,
			3722920812U,
			990811048U,
			1775947099U,
			2420926680U,
			611192777U,
			2020217286U,
			87120819U,
			998526500U,
			2232410636U,
			1441192295U,
			2594593289U,
			1463522122U,
			1106258703U,
			3023134259U,
			2454957055U,
			2365619540U,
			2649603374U,
			1864406394U,
			2923633494U,
			1399868559U,
			1334074599U,
			3693946027U,
			778264510U,
			115790008U,
			4274369200U,
			3145262002U,
			1614025510U,
			408577772U,
			2083348693U,
			3355305647U,
			447611183U,
			1557605344U,
			2354439461U,
			2864244144U,
			3833956433U,
			136690128U,
			1398139588U,
			697462294U,
			2342155705U,
			2154741544U,
			1042556277U,
			3485620155U,
			2171563U,
			3106893692U,
			453713521U,
			785040283U,
			3446400959U,
			2480699293U,
			278963394U,
			2123911412U,
			2157567761U,
			3362421092U,
			881117363U,
			3703346857U,
			809912639U,
			857609756U,
			2141082260U,
			3882916604U,
			932846848U,
			1124227605U,
			1888998332U,
			1715420294U,
			169544927U,
			3032322882U,
			801282643U,
			2513727880U,
			2298224490U,
			1545493181U,
			3426365236U,
			4223095755U,
			2398199241U,
			1903767599U,
			3782294377U,
			2066040254U,
			3222717792U,
			1624944119U,
			3963108664U,
			2495799116U,
			1399655072U,
			440608397U,
			3435142195U,
			2817325646U,
			1737810556U,
			575642557U,
			3552667500U,
			3322173868U,
			927402512U,
			364421728U,
			599285907U,
			2429418447U,
			1484225520U,
			330862149U,
			2621805447U,
			2521890203U,
			3846259842U,
			1859964842U,
			1350899934U,
			949302832U,
			2462358444U,
			3683645545U,
			4125859654U,
			1621799839U,
			2829617406U,
			3233484582U,
			2059448957U,
			3936527017U,
			3967327662U,
			3453067100U,
			1211948981U,
			1601202586U,
			3018431787U,
			3998060471U,
			1939686542U,
			1161904064U,
			1461317297U,
			3095633917U,
			2841381105U,
			60342663U,
			3502477112U,
			1893006678U,
			37460647U,
			1522859575U,
			2700630472U,
			1572043461U,
			3673655283U,
			3374247585U,
			1902125673U,
			3193052243U,
			3969038842U,
			2652172467U,
			3120816098U,
			1986722102U,
			3025177692U,
			3377738769U,
			909984300U,
			2209781978U,
			1349718201U,
			1085661336U,
			2290085930U,
			2748823570U,
			853192715U,
			3359900742U,
			2844893699U,
			530987629U,
			1530040435U,
			443667310U,
			3018614773U,
			139427146U,
			1863464682U,
			1844613690U,
			630035339U,
			2673439500U,
			600308873U,
			2677606586U,
			2317786399U,
			1269040051U,
			1394802059U,
			1430665075U,
			3089181043U,
			3970764059U,
			3619222596U,
			1602065316U,
			2003214361U,
			2147690473U,
			2330335807U,
			162812156U,
			4140669335U,
			2131884347U,
			1603215604U,
			4281626423U,
			3724858628U,
			2826711183U,
			393480128U,
			3868297889U,
			2248920387U,
			4026437743U,
			2117064237U,
			2598684071U,
			3755812170U,
			3598036233U,
			2786831817U,
			2990786800U,
			2784385297U,
			3659850622U,
			1207896673U,
			295771476U,
			1092729753U,
			3751397541U,
			4203559300U,
			1351781951U,
			2561102925U,
			1357649684U,
			871494748U,
			3733645076U,
			2290386416U,
			1521997369U,
			469500558U,
			4123766162U,
			1732477105U,
			2616286709U,
			469699340U,
			2544051593U,
			1134335081U,
			1536861450U,
			1456305951U,
			2557989286U,
			3754244072U,
			3453719208U,
			2756594475U,
			3190904494U,
			1635595023U,
			1153015132U,
			4091493347U,
			475964937U,
			4151438651U,
			1944167858U,
			3681495630U,
			1376514214U,
			3800377280U,
			1942759872U,
			1268884901U,
			1740788013U,
			251853207U,
			2467907464U,
			3127408964U,
			3165515302U,
			491543141U,
			3495431778U,
			2737343303U,
			2747140972U,
			410206260U,
			2077388606U,
			527066089U,
			751349584U,
			1210240089U,
			2076111632U,
			1029634240U,
			3704426793U,
			944370635U,
			3292593635U,
			991330614U,
			2185747485U,
			932305130U,
			1296786645U,
			1313126460U,
			1188338714U,
			2854979675U,
			3813853212U,
			787455732U,
			3533637961U,
			3713044333U,
			1451361011U,
			3916320276U,
			3202073237U,
			1057704003U,
			2702400326U,
			3064736942U,
			996198596U,
			2420280954U,
			3642955667U,
			773914350U,
			2718627501U,
			3747209380U,
			3726760191U,
			1558339607U,
			3133216872U,
			379320913U,
			709384999U,
			1721191982U,
			3819595940U,
			3712479898U,
			936217269U,
			1973823631U,
			1955948166U,
			410517340U,
			2111120637U,
			2379598534U,
			905352721U,
			873473372U,
			3910270070U,
			1022712977U,
			3461610229U,
			1751676479U,
			708122578U,
			2092879123U,
			88518133U,
			3499081217U,
			2542260676U,
			4155861608U,
			1166923673U,
			1632616362U,
			3543145595U,
			2021534301U,
			3332640359U,
			2253648295U,
			1260442297U,
			2777520432U,
			892157617U,
			1208858608U,
			3119045840U,
			1191117103U,
			161173626U,
			926893024U,
			2557305213U,
			3840385214U,
			1826549790U,
			1072395575U,
			3424718584U,
			1793948682U,
			151374168U,
			169629860U,
			72632008U,
			2577267971U,
			871437894U,
			1639792102U,
			2949867320U,
			1953546890U,
			253251054U,
			3119045566U,
			2250187019U,
			3044677674U,
			3981280497U,
			1456802144U,
			1835232888U,
			2855078836U,
			517310744U,
			3734417323U,
			3455033759U,
			1036089071U,
			2577507212U,
			189302957U,
			3090904892U,
			393179650U,
			2799058875U,
			3597718553U,
			2414453209U,
			4092112365U,
			633408187U,
			3380019900U,
			3638851930U,
			1179591678U,
			1812429465U,
			1839318602U,
			480598210U,
			1555050461U,
			4169237119U,
			3419477298U,
			917902822U,
			577505804U,
			1667452822U,
			1190833073U,
			3296201559U,
			1818510158U,
			892022391U,
			106151081U,
			732222281U,
			2352492833U,
			3562880070U,
			1053737023U,
			1082947722U,
			3008997305U,
			1910475362U,
			767650660U,
			2953717699U,
			733138539U,
			3001542901U,
			2633689481U,
			3603392079U,
			3107618721U,
			1005000578U,
			727188012U,
			77632615U,
			424189366U,
			3507685844U,
			1522013052U,
			864010738U,
			504853913U,
			1455980336U,
			759863712U,
			3225004772U,
			878479396U,
			1016061029U,
			2659872147U,
			245034326U,
			2887827100U,
			4153830813U,
			825397033U,
			3721321224U,
			3651388992U,
			2384489917U,
			1964229421U,
			68808598U,
			3876445172U,
			201357213U,
			1880903858U,
			3776637207U,
			3940193873U,
			1235314321U,
			2350884892U,
			2730285895U,
			817449593U,
			2724410212U,
			3059070250U,
			1005876751U,
			432211109U,
			203887377U,
			535718239U,
			3639838536U,
			3954057555U,
			4272275623U,
			2165340385U,
			562049622U,
			1930863415U,
			2850119717U,
			250932776U,
			3563074059U,
			316514508U,
			2226569015U,
			1123194831U,
			2963459783U,
			1770718670U,
			129095288U,
			3920475341U,
			1038769533U,
			3225219609U,
			3320541643U,
			1439795638U,
			3877984613U,
			939241630U,
			3374570346U,
			402015807U,
			277766060U,
			4047720760U,
			1052759214U,
			3629648391U,
			3865351672U,
			3045782081U,
			1913294180U,
			3511707859U,
			2532571298U,
			2786356504U,
			1833693668U,
			3214713433U,
			417460783U,
			3907096475U,
			2730384120U,
			536994268U,
			3067736892U,
			454915722U,
			3449511584U,
			3758873273U,
			2593945283U,
			2335840581U,
			1938936843U,
			793643066U,
			2952270521U,
			1629130196U,
			382551839U,
			2616808405U,
			539784017U,
			1574646470U,
			1305215249U,
			3269483602U,
			527649648U,
			2332304080U,
			2998283769U,
			198791061U,
			452259928U,
			3452027970U,
			3303136012U,
			2254051512U,
			329084686U,
			1137612451U,
			744447439U,
			1602000982U,
			1727488694U,
			1198202459U,
			1992808221U,
			981039382U,
			1077192964U,
			3856771044U,
			1920257889U,
			3093634636U,
			543782434U,
			1410149078U,
			2851895620U,
			2968848126U,
			3163572812U,
			1581746849U,
			1110337946U,
			3320271653U,
			3933700013U,
			1383098702U,
			848920463U,
			3776309175U,
			4272578325U,
			1060723752U,
			385867275U,
			1799926185U,
			1376408106U,
			4109007647U,
			2413039552U,
			2319858851U,
			4239166758U,
			1090114030U,
			279516875U,
			3061292530U,
			2745241544U,
			2703350923U,
			2131017071U,
			627074395U,
			1170843737U,
			2349865322U,
			232840806U,
			1077934945U,
			2053655589U,
			233915876U,
			789329792U,
			1295642342U,
			2759809950U,
			3504715425U,
			2425471244U,
			3046657476U,
			3002901141U,
			1931416307U,
			4169333719U,
			3429460322U,
			3049249575U,
			2689706955U,
			2280723088U,
			337776817U,
			1593277269U,
			3128962031U,
			1269243970U,
			1645765056U,
			3848907812U,
			1562932689U,
			2264836456U,
			2578147773U,
			3536577081U,
			3755372090U,
			4034383169U,
			1203459213U,
			3622955451U,
			793594744U,
			761425730U,
			1952897987U,
			1808801108U,
			3815223110U,
			2334852894U,
			1669467319U,
			3895763642U,
			2458256151U,
			2815860000U,
			522693669U,
			3565575701U,
			2952312879U,
			1658814294U,
			1070796759U,
			1107763313U,
			3159887876U,
			1105866496U,
			3852495021U,
			3768961884U,
			3562838680U,
			1361752601U,
			2777959285U,
			2005220190U,
			3173160579U,
			1943340837U,
			962384494U,
			2758948641U,
			2355268203U,
			2029771584U,
			3144164019U,
			921862861U,
			1219466642U,
			1821591788U,
			2625441733U,
			463058273U,
			979962412U,
			2143037644U,
			2206540329U,
			3829020233U,
			1096018408U,
			401985814U,
			1757012244U,
			3460904668U,
			1499532882U,
			1889295187U,
			3532963951U,
			3523385001U,
			2097339844U,
			3778615342U,
			2982772157U,
			1028841805U,
			903552870U,
			751951438U,
			4270896452U,
			1166665370U,
			3968893189U,
			161858263U,
			1897750481U,
			211914627U,
			2802293566U,
			2963810572U,
			936669512U,
			368524817U,
			3368067855U,
			2859900771U,
			3974524641U,
			4205724155U,
			1731445641U,
			3843999627U,
			4051151116U,
			789181193U,
			1624836581U,
			1516777619U,
			2212978725U,
			3952630382U,
			467752864U,
			90284470U,
			1153567251U,
			4008167671U,
			1104790202U,
			4104155506U,
			1067958969U,
			3652370412U,
			3211811015U,
			306137291U,
			3413440864U,
			441078622U,
			3712119171U,
			3533111881U,
			2535220281U,
			2693924480U,
			2928921231U,
			2570092980U,
			829403984U,
			2629513852U,
			2298740193U,
			2871428236U,
			3939563534U,
			198303358U,
			3788208906U,
			338128405U,
			1920487164U,
			1549413221U,
			4186141827U,
			516071510U,
			2255449572U,
			2181239127U,
			927979574U,
			1298512256U,
			4025079072U,
			2335877742U,
			393648406U,
			1001774617U,
			2711326423U,
			772998703U,
			2634407255U,
			3249954668U,
			1308724076U,
			512042011U,
			3701359896U,
			4078939855U,
			3560443572U,
			3757672575U,
			2922143476U,
			1511709515U,
			1379695135U,
			939216070U,
			3448975867U,
			1612999367U,
			2052959805U,
			416434726U,
			3604313936U,
			1394552254U,
			2057180085U,
			2580735550U,
			2633173401U,
			3968014367U,
			3557150043U,
			3805361299U,
			584766349U,
			1296416054U,
			2515051035U,
			1831957173U,
			2690484005U,
			2278645263U,
			2574893193U,
			2032351839U,
			1430813459U,
			2994201725U,
			3458969984U,
			851573811U,
			4078512662U,
			2478162142U,
			314784453U,
			210896680U,
			3316161128U,
			3346032109U,
			112859787U,
			3905977634U,
			1542462009U,
			4289446189U,
			1094679750U,
			2414590581U,
			61962198U,
			4222310336U,
			209068223U,
			921806526U,
			2066668229U,
			4282866076U,
			2342739633U,
			1173313279U,
			1159091329U,
			892754668U,
			92553127U,
			2569296220U,
			2634960553U,
			1978794138U,
			554301645U,
			2635408690U,
			803379374U,
			2806522318U,
			3023924648U,
			2293793200U,
			3433453220U,
			980374049U,
			3682201287U,
			3104387075U,
			4114931166U,
			2183137434U,
			3886477153U,
			1376343287U,
			2649559455U,
			1257310374U,
			1399319813U,
			2588199551U,
			2199288037U,
			123163244U,
			2963990353U,
			2177585327U,
			1505440451U,
			874582300U,
			2404654583U,
			2862877369U,
			1870887197U,
			1911558377U,
			3973890612U,
			2018940080U,
			706745780U,
			3095367699U,
			3984433909U,
			3059292573U,
			913930799U,
			1427119720U,
			4044300934U,
			4087788426U,
			1151446447U,
			421879871U,
			1096717396U,
			2610443015U,
			389824963U,
			1947367907U,
			3130394164U,
			2548268617U,
			2097208374U,
			2257163672U,
			729558258U,
			4233363949U,
			4108068U,
			4286958999U,
			4283579052U,
			222999948U,
			239509233U,
			4084618248U,
			3041717995U,
			2760887993U,
			322859761U,
			1832095348U,
			1135770688U,
			3976424679U,
			1124204263U,
			865265676U,
			1375982663U,
			2107375596U,
			2799490663U,
			1960804795U,
			3460919758U,
			3903147946U,
			2576335321U,
			1978292605U,
			3229254909U,
			3833689880U,
			4267760275U,
			1458274772U,
			2471436979U,
			392192013U,
			503953290U,
			1377757577U,
			3705329502U,
			4163288980U,
			3993733467U,
			61097480U,
			1474673974U,
			4250376032U,
			1559079505U,
			1985286472U,
			766440380U,
			3273962501U,
			4020049368U,
			3614679635U,
			4254072213U,
			107227781U,
			926010190U,
			3002410312U,
			2522788987U,
			3948797703U,
			444858352U,
			3724149332U,
			1018473357U,
			994600470U,
			2151694236U,
			1674105005U,
			1973301207U,
			1595207102U,
			677746474U,
			2087476614U,
			1521535475U,
			2467658264U,
			189894446U,
			3181307196U,
			919082297U,
			2538540151U,
			3548021176U,
			4094656772U,
			463632544U,
			3599701517U,
			4065984491U,
			1232973364U,
			2996681541U,
			3313452778U,
			1808878494U,
			245249504U,
			1669172945U,
			1131250019U,
			2158976480U,
			3428129885U,
			1176283986U,
			3632082721U,
			3003204651U,
			1785531734U,
			3689610444U,
			1381799382U,
			1340568373U,
			2553854312U,
			4036312814U,
			2999397969U,
			3651025643U,
			1329138976U,
			3540124907U,
			2637529028U,
			3270777560U,
			3057960786U,
			3973996547U,
			1825211679U,
			597390586U,
			2481741959U,
			2948026742U,
			3817120416U,
			83149565U,
			3632744250U,
			1435632478U,
			941255442U,
			3629159169U,
			3399784157U,
			2709095714U,
			1379413205U,
			1238827925U,
			2480274911U,
			2311375311U,
			4173131479U,
			2753930351U,
			2355896002U,
			3157567812U,
			4234468881U,
			1569200977U,
			3568394182U,
			3155674828U,
			1605062225U,
			2415983720U,
			3155390280U,
			2482486150U,
			1953171628U,
			817636178U,
			4256687736U,
			3670614900U,
			1716854496U,
			3803560732U,
			1172571700U,
			4037509029U,
			467873551U,
			2787841504U,
			148426808U,
			1497029465U,
			3927057692U,
			2943954137U,
			2304916897U,
			3322957486U,
			101634158U,
			1494322824U,
			1384950899U,
			1181301444U,
			911572954U,
			3255682193U,
			1218067396U,
			1102236858U,
			192992031U,
			1746382775U,
			1595964976U,
			2268744124U,
			2515168993U,
			1255875487U,
			1494423836U,
			2548378751U,
			1015013599U,
			872346826U,
			3742552002U,
			1513607191U,
			656048930U,
			110052027U,
			3744001042U,
			1264624913U,
			968672359U,
			2263029723U,
			1814583778U,
			3170844326U,
			1752458372U,
			1966441534U,
			3157504038U,
			2012866302U,
			1818400021U,
			3951717942U,
			1401922104U,
			444526226U,
			2575046321U,
			3993777116U,
			1930548056U,
			95127945U,
			1593786160U,
			4279567973U,
			3767625002U,
			3815205094U,
			1198131966U,
			2294957320U,
			445525433U,
			4081043694U,
			3365676905U,
			305153316U,
			390299674U,
			524390907U,
			1760415220U,
			1622342885U,
			132301342U,
			2160565867U,
			2856555479U,
			3730461308U,
			4091572781U,
			4229593937U,
			2508031591U,
			4107448178U,
			2309706829U,
			3925820709U,
			1281173561U,
			3911783340U,
			1220544585U,
			729603722U,
			2024723818U,
			4143810346U,
			766946627U,
			2246103495U,
			2496721719U,
			2467503659U,
			2721889982U,
			3732372407U,
			1774666332U,
			3215057773U,
			411231985U,
			3906238681U,
			2106287262U,
			659332393U,
			2272568239U,
			3270161128U,
			3688676259U,
			1776652607U,
			1017042956U,
			3054814870U,
			2880394752U,
			1130065973U,
			2057482136U,
			203614131U,
			2047822218U,
			4136740916U,
			401181343U,
			3476866487U,
			2150214325U,
			4123882212U,
			1372523505U,
			1257556182U,
			1782271462U,
			2452799249U,
			3131307815U,
			3012959183U,
			3501635726U,
			784537819U,
			1842500460U,
			1144106243U,
			2319246221U,
			2759292849U,
			2047584143U,
			301508765U,
			4264626496U,
			3964364958U,
			2649202219U,
			2970625901U,
			1175716457U,
			2063931402U,
			2379304773U,
			1657896728U,
			2121442069U,
			2300830886U,
			2932047027U,
			3716386519U,
			1310064611U,
			1648254075U,
			1687852619U,
			1550573629U,
			382982802U,
			126262178U,
			910659229U,
			2603976618U,
			3708510738U,
			1927733308U,
			3178132173U,
			1074467800U,
			287920142U,
			2629898131U,
			1367626577U,
			3976795883U,
			1782919021U,
			1257555105U,
			1492324206U,
			3666553067U,
			2527681891U,
			3688190052U,
			3374542914U,
			1497956156U,
			3807553384U,
			2846229302U,
			318584663U,
			4022615454U,
			393262260U,
			2891054871U,
			2340514271U,
			2749897719U,
			3076033748U,
			2773270071U,
			3339109272U,
			1628562829U,
			3504536669U,
			473341587U,
			1914662775U,
			1450973558U,
			761180022U,
			501856278U,
			3963980352U,
			33603075U,
			493104562U,
			914793780U,
			3562343411U,
			3917308804U,
			3261454462U,
			4081518000U,
			2562267093U,
			2739297084U,
			1879891307U,
			1656616666U,
			1644104905U,
			3705196471U,
			4226955206U,
			1711067590U,
			4029409539U,
			2117923171U,
			489964169U,
			3973569983U,
			332826858U,
			4017233064U,
			4015236655U,
			2643157651U,
			2002563233U,
			3572174423U,
			3915753505U,
			3131776433U,
			1127064871U,
			379694022U,
			628837449U,
			3171292619U,
			1724280401U,
			3680429360U,
			3045600402U,
			1861167047U,
			3690939621U,
			2330501339U,
			2921988890U,
			403015514U,
			1508670469U,
			2624283269U,
			1450339072U,
			4258710495U,
			1557883308U,
			2894572667U,
			4088179162U,
			3906416249U,
			1319688097U,
			2137139594U,
			3838726142U,
			2652990920U,
			4089847919U,
			1162616932U,
			2934137254U,
			636855225U,
			2763584811U,
			798350482U,
			2545935229U,
			3693652849U,
			3631870272U,
			3736901767U,
			2792535375U,
			3955014244U,
			2247590305U,
			125758665U,
			4005020011U,
			4116714052U,
			2765239205U,
			2574813481U,
			2932883271U,
			666386030U,
			1800227191U,
			3786463619U,
			1119724173U,
			318463198U,
			1082367487U,
			2482749485U,
			493896573U,
			2373935833U,
			2399773881U,
			4228962323U,
			3649231151U,
			1679052477U,
			4000638339U,
			2064464933U,
			1672858629U,
			2940712804U,
			287581737U,
			862893212U,
			2944139206U,
			3957449149U,
			4053455730U,
			2135921287U,
			1195619244U,
			3983938718U,
			1309131373U,
			4224478714U,
			928473026U,
			4125103390U,
			2807681115U,
			139249227U,
			866945217U,
			2976241814U,
			3477603691U,
			3978436805U,
			670977604U,
			3856473513U,
			2776161337U,
			3223668539U,
			180721464U,
			1788781048U,
			1413916507U,
			2479060038U,
			3011454694U,
			1843298839U,
			2669916533U,
			1754023185U,
			3441339384U,
			3913100466U,
			83555772U,
			2246173111U,
			1999460035U,
			1794406563U,
			1421493868U,
			2438765616U,
			2171999613U,
			462411163U,
			1733201430U,
			4058141108U,
			481755552U,
			3986184846U,
			2993499657U,
			1462754136U,
			3795974954U,
			935327138U,
			2715411049U,
			336631895U,
			2242659082U,
			442496556U,
			4285458769U,
			2053981617U,
			2966172440U,
			4273522071U,
			1347706388U,
			3618949619U,
			1237332503U,
			2174173268U,
			4109703400U,
			1839425446U,
			1490834604U,
			1382330272U,
			3921895910U,
			2308882499U,
			3486398354U,
			3974757973U,
			2471902806U,
			3438473732U,
			2803675720U,
			2995719656U,
			742791322U,
			3615680691U,
			3270212000U,
			2062562190U,
			1582939264U,
			820144248U,
			3622218082U,
			2752366602U,
			1945057125U,
			1948113227U,
			893142852U,
			2592753873U,
			3352209276U,
			3618912932U,
			4235720946U,
			1804002492U,
			757791334U,
			3292065249U,
			1284186567U,
			2744465360U,
			3258229183U,
			3151940549U,
			2182632111U,
			1851049325U,
			386674580U,
			3227325940U,
			2501240135U,
			2686296607U,
			1881280493U,
			3110540267U,
			3200564085U,
			2832644953U,
			4249114288U,
			2126076287U,
			112209674U,
			2692694741U,
			4056241039U,
			3882070811U,
			3648624674U,
			2521531739U,
			1306994321U,
			889815221U,
			469320968U,
			1436348717U,
			1570491302U,
			1563549593U,
			4215220490U,
			3536571344U,
			25980389U,
			331094049U,
			2585155446U,
			2941264739U,
			3798710389U,
			2662050871U,
			1673876259U,
			2332150100U,
			3123390287U,
			2385957098U,
			2000438463U,
			1597871030U,
			2427069082U,
			8472453U,
			907516273U,
			1368225602U,
			1412858611U,
			1650678109U,
			1398902420U,
			4014678995U,
			2306645598U,
			150291197U,
			1215259046U,
			1435841929U,
			3557692371U,
			2840838621U,
			330825507U,
			2569137694U,
			2631767303U,
			256610733U,
			3758576302U,
			988058695U,
			1589016853U,
			2941182623U,
			4245655408U,
			2120143403U,
			533108210U,
			3715336995U,
			2093266653U,
			831016117U,
			3376558386U,
			1455770289U,
			3650350124U,
			966597232U,
			3283701000U,
			3456380188U,
			981593436U,
			1132087465U,
			3710399072U,
			3585236440U,
			3936594883U,
			2295130431U,
			1180681100U,
			1197095855U,
			3365785733U,
			772157422U,
			2538843207U,
			10194988U,
			3191001625U,
			1386409914U,
			991301736U,
			1900575785U,
			1078883562U,
			4250253525U,
			2631494252U,
			3688642471U,
			1871510886U,
			1138420408U,
			4059059934U,
			923228636U,
			804704258U,
			1473763358U,
			2397317181U,
			1662629800U,
			4145021766U,
			154464793U,
			4140896775U,
			2657597053U,
			345318580U,
			3166814035U,
			355891373U,
			4000434780U,
			528228837U,
			3490845159U,
			948256327U,
			3406435003U,
			3047749139U,
			1547701447U,
			3625426289U,
			165881015U,
			1121846159U,
			1375947171U,
			3151331828U,
			886845226U,
			1770107195U,
			2125027227U,
			2087550388U,
			991694551U,
			442234651U,
			2852203857U,
			3748568301U,
			979016796U,
			2710304920U,
			874446531U,
			3115364730U,
			2112064268U,
			2286761732U,
			1377204856U,
			3954924210U,
			1464359081U,
			3463040828U,
			1565120549U,
			2858584807U,
			3338944706U,
			3843596902U,
			1987186579U,
			2676677287U,
			4084734232U,
			1891843902U,
			679425110U,
			4121717069U,
			324320839U,
			4169641007U,
			2517864602U,
			1313054075U,
			2634733070U,
			1062491313U,
			1441843143U,
			883725379U,
			1807355398U,
			2420320446U,
			566758232U,
			1835075509U,
			3617545807U,
			1953313443U,
			3445342982U,
			2303291388U,
			3952406689U,
			2154497297U,
			1971168229U,
			3026406511U,
			721188934U,
			4277849671U,
			3403100067U,
			246994624U,
			1244243203U,
			3757669412U,
			301878702U,
			2261532264U,
			1208117967U,
			3758735484U,
			3851456014U,
			3001863150U,
			1231180485U,
			206925451U,
			160111598U,
			663536597U,
			56240558U,
			1104944572U,
			187804700U,
			497668134U,
			1410794310U,
			4248392762U,
			2157455733U,
			2553092146U,
			2746532649U,
			192517267U,
			2776567034U,
			3513654847U,
			1095817575U,
			3624120796U,
			3882349130U,
			3639209362U,
			1330325190U,
			1822612118U,
			2016440872U,
			2453212396U,
			1595188100U,
			2186000147U,
			2077338915U,
			193197334U,
			1174351580U,
			680985852U,
			1968593391U,
			2846753703U,
			597024564U,
			3180186015U,
			3275827354U,
			2704732663U,
			588052349U,
			1181337291U,
			2508105146U,
			936904698U,
			3052511485U,
			586795176U,
			201156249U,
			1242252493U,
			2925263545U,
			2407810389U,
			1540371824U,
			4157883207U,
			3402833919U,
			72623809U,
			866060955U,
			1599573478U,
			1800207412U,
			2960576874U,
			1530229922U,
			3711767475U,
			459570159U,
			2484338741U,
			1828503203U,
			4044620098U,
			1369288269U,
			238225717U,
			1526437541U,
			1815697679U,
			1483432804U,
			1651057102U,
			4119999825U,
			1248291429U,
			3244034734U,
			695983139U,
			845587813U,
			3233287376U,
			1706337602U,
			4153833157U,
			170836375U,
			3845308394U,
			50391078U,
			3641497656U,
			2804855908U,
			2017267321U,
			3369949776U,
			3343346587U,
			445747083U,
			2985120972U,
			872614284U,
			1391870065U,
			3050018011U,
			759017423U,
			3009773752U,
			2368167677U,
			2904457605U,
			4236756057U,
			407605U,
			1620306137U,
			321048922U,
			2048475019U,
			2524616426U,
			2187162827U,
			3064820100U,
			590209214U,
			4224667303U,
			900702849U,
			152104026U,
			1624269177U,
			1945764262U,
			2072148594U,
			1380536182U,
			3246486815U,
			1573102088U,
			2847656569U,
			1404532771U,
			2264503401U,
			1492995177U,
			3038610738U,
			2796403877U,
			4233827973U,
			3080734761U,
			3055814956U,
			2536714556U,
			3075816452U,
			3937981347U,
			2614143689U,
			2377467970U,
			2763404694U,
			1841593736U,
			3494332135U,
			999620422U,
			1618323140U,
			2301381095U,
			245887753U,
			391696328U,
			1201207762U,
			211117879U,
			3767027060U,
			1357885997U,
			2982407206U,
			1235895185U,
			370304553U,
			319029276U,
			4002701181U,
			1687171288U,
			388390222U,
			3394678271U,
			860405495U,
			937926954U,
			4093573438U,
			598605160U,
			1156303328U,
			2214725169U,
			1440482681U,
			1905761396U,
			957818531U,
			4201768597U,
			2723331075U,
			361987033U,
			3879943461U,
			2478667408U,
			3173042518U,
			2946479108U,
			1084726472U,
			3222863676U,
			1652727214U,
			2976810329U,
			2263441608U,
			1064599147U,
			3647225783U,
			966466184U,
			1287283696U,
			2118893445U,
			1866716545U,
			163788647U,
			2321062868U,
			4070566781U,
			2627137782U,
			2115474526U,
			2361673355U,
			2979161046U,
			1677041611U,
			635809139U,
			1070336892U,
			1921374685U,
			1814246526U,
			1466925650U,
			4127859214U,
			365231986U,
			3545953874U,
			200245527U,
			1727585897U,
			4115964313U,
			4181640794U,
			2131514762U,
			2311118933U,
			1708961429U,
			456362504U,
			1061024158U,
			3984521652U,
			3176541289U,
			4222976319U,
			2067522061U,
			3930336642U,
			1023494603U,
			556342044U,
			1381473021U,
			3706105043U,
			3718657294U,
			3893769502U,
			2383551037U,
			521977771U,
			2500685794U,
			2091384117U,
			4218506617U,
			4078450148U,
			714864504U,
			1910673776U,
			2950302593U,
			2682762430U,
			3387878982U,
			2919690355U,
			3501029773U,
			2349844445U,
			2068093780U,
			3874196887U,
			4261035278U,
			533430591U,
			3692926395U,
			3587905341U,
			3700676606U,
			358455121U,
			2375936768U,
			1303957061U,
			4021157669U,
			2447471234U,
			3180086535U,
			3670016732U,
			1474448802U,
			2890513267U,
			252141885U,
			1119582597U,
			2092343123U,
			3276085233U,
			372020100U,
			4216815596U,
			304441606U,
			73922474U,
			2451229011U,
			1770508801U,
			1324182183U,
			456837457U,
			38427753U,
			269572686U,
			2197228121U,
			2845545506U,
			2961937701U,
			766311646U,
			1970987488U,
			337724893U,
			2359589316U,
			1412597660U,
			1883117189U,
			3353292214U,
			2962149929U,
			1835530270U,
			2415777721U,
			557062595U,
			3849344477U,
			3271106611U,
			768009609U,
			3721481620U,
			3981984485U,
			1494037391U,
			2955800626U,
			1497560719U,
			1529905226U,
			2615135085U,
			1040376515U,
			2427046906U,
			3152992260U,
			2099244213U,
			2637965822U,
			2345494954U,
			692983104U,
			1059920310U,
			2875881303U,
			852463466U,
			1203534864U,
			2861237118U,
			314895833U,
			3294874837U,
			1330245835U,
			909925599U,
			2008031219U,
			12872362U,
			718294194U,
			389798689U,
			503328137U,
			2131147831U,
			3522274475U,
			747580710U,
			3656783961U,
			4031716698U,
			2940925945U,
			2924968926U,
			1849066522U,
			632870523U,
			2239781917U,
			288362393U,
			1555985672U,
			1739830199U,
			110230941U,
			3661844333U,
			2716576804U,
			1392538217U,
			3700155119U,
			2017714762U,
			2686005883U,
			3031957852U,
			1189291571U,
			3836593097U,
			508318146U,
			3026060508U,
			1708078636U,
			3894792299U,
			3187204559U,
			810530406U,
			1500941865U,
			3388992094U,
			3030538766U,
			930109862U,
			3621312022U,
			3726010917U,
			2154337447U,
			103211214U,
			3496008638U,
			4232406470U,
			1113684540U,
			3609522770U,
			2179867222U,
			3673730086U,
			2536204291U,
			60085322U,
			1595632886U,
			2648868704U,
			4165793280U,
			2740857826U,
			870542525U,
			2828814900U,
			2151213791U,
			4290262982U,
			872521244U,
			3726703478U,
			3131065354U,
			2017492788U,
			3282330662U,
			1284691943U,
			3528021869U,
			1851072329U,
			3082849361U,
			355269306U,
			3205751095U,
			3212398738U,
			4151288146U,
			4213287089U,
			2243265683U,
			3775203050U,
			2250288580U,
			257912738U,
			3953018706U,
			2046309359U,
			3727839202U,
			4013552194U,
			3583375169U,
			3863211235U,
			84542656U,
			2002936796U,
			3242460905U,
			2931960691U,
			427847334U,
			1748996074U,
			19901994U,
			1394840257U,
			1102890522U,
			865470304U,
			2922494291U,
			137762038U,
			117797539U,
			3681152579U,
			2712162705U,
			4002441960U,
			723305872U,
			181944652U,
			3731462554U,
			1007144401U,
			1221843268U,
			2065654932U,
			4215425414U,
			68919178U,
			455018774U,
			1234683934U,
			2012148818U,
			2639377465U,
			3968899683U,
			2786458110U,
			630069535U,
			2082537550U,
			2986657698U,
			1726687889U,
			1540150679U,
			400193510U,
			3802546585U,
			806393774U,
			1720108055U,
			3817004892U,
			3262214576U,
			3274020033U,
			3608691712U,
			2624362576U,
			428774197U,
			430323276U,
			594443224U,
			2351919361U,
			3683934550U,
			1287209357U,
			914735429U,
			638153801U,
			2183987611U,
			1087477615U,
			2980035902U,
			2477338124U,
			488814587U,
			3229191157U,
			2793015110U,
			2715837749U,
			22395479U,
			256473521U,
			4021418779U,
			671206365U,
			1085546689U,
			655243355U,
			788867380U,
			1745305943U,
			790767080U,
			3996160347U,
			409847935U,
			1847519291U,
			1283260863U,
			255933961U,
			3084475750U,
			4274714680U,
			1548593914U,
			2479837335U,
			1945805810U,
			1012835507U,
			771952940U,
			2918850053U,
			373154619U,
			1399059766U,
			2125909764U,
			1259461565U,
			1858969937U,
			468355250U,
			3666634740U,
			3751766480U,
			4154887931U,
			4267236350U,
			2007684977U,
			3627105035U,
			890820416U,
			2428650652U,
			342063084U,
			1386056070U,
			4121316677U,
			1746059907U,
			1501517033U,
			323110597U,
			4173522949U,
			1179024798U,
			585762394U,
			3813148714U,
			3874901636U,
			1625052818U,
			1435066195U,
			2559497834U,
			4278321641U,
			3700801397U,
			2223772924U,
			3411765659U,
			47199851U,
			1052804904U,
			831782582U,
			1082217080U,
			443190723U,
			4019502418U,
			536057602U,
			2523785537U,
			500004461U,
			796333849U,
			729982323U,
			635672913U,
			3155414433U,
			538166184U,
			3004359310U,
			395209697U,
			339945887U,
			3008010812U,
			3457069015U,
			1377860754U,
			3474826151U,
			3114290813U,
			1178994048U,
			3274806670U,
			3707787804U,
			4222501840U,
			1577554731U,
			1482059591U,
			954570199U,
			373357800U,
			3355755269U,
			1391601793U,
			1827060448U,
			1026168652U,
			659184336U,
			1454759234U,
			1536843403U,
			3457113330U,
			1761715758U,
			2322695409U,
			3463157998U,
			1731667887U,
			2511649653U,
			3843202264U,
			766883258U,
			3106800304U,
			868173899U,
			3322867123U,
			1259319308U,
			1924391469U,
			3384215335U,
			435434161U,
			88612799U,
			3041128725U,
			4061265984U,
			1709461938U,
			1904812875U,
			2781093391U,
			3401096255U,
			323601326U,
			2802922594U,
			251731765U,
			1097986142U,
			1685394535U,
			4107460256U,
			2007093328U,
			3453831256U,
			4124948897U,
			811066881U,
			2696276579U,
			1802030532U,
			996849290U,
			138783415U,
			3905150283U,
			2209986990U,
			3697154266U,
			3339465048U,
			3432211836U,
			1918913003U,
			3204236639U,
			3667432713U,
			1249038285U,
			4093702436U,
			1636362982U,
			2220233756U,
			2304851056U,
			3257781651U,
			2773173153U,
			3250259565U,
			1235823983U,
			1157431608U,
			642279599U,
			1786915663U,
			4100330151U,
			2094779673U,
			2589666254U,
			771862225U,
			1020235862U,
			3491989321U,
			945937327U,
			2994034403U,
			3149328118U,
			1059289522U,
			2559756537U,
			971186633U,
			341154148U,
			1143171504U,
			2892001249U,
			3926855513U,
			4113039546U,
			2921587928U,
			2750197792U,
			1376569058U,
			4136505874U,
			3304822344U,
			2740879272U,
			592012240U,
			1944556871U,
			3271582345U,
			2815420622U,
			3371774761U,
			3470166620U,
			1607256151U,
			3755254886U,
			2332068740U,
			1506309663U,
			1814681121U,
			4079563672U,
			4011480282U,
			3839964674U,
			789887485U,
			2780588733U,
			1528800055U,
			661465800U,
			1140944058U,
			4281678083U,
			3746080272U,
			4193623520U,
			3374759620U,
			581177465U,
			500987219U,
			2907802658U,
			4127539311U,
			2723334027U,
			283983114U,
			3810884428U,
			2424676204U,
			2845454903U,
			3740389662U,
			1464704632U,
			3407904299U,
			4000624233U,
			1495087688U,
			3712059298U,
			3470235855U,
			1110555006U,
			2177311462U,
			3313641794U,
			3911590053U,
			1073603525U,
			3547357112U,
			3882799612U,
			3126107944U,
			3104795945U,
			1106050540U,
			2961692223U,
			991627865U,
			1285165406U,
			3234649546U,
			967314105U,
			3716245728U,
			2484907907U,
			1724391837U,
			592038963U,
			976108090U,
			746874469U,
			3723748381U,
			2923981459U,
			1438049485U,
			1510994170U,
			1993128354U,
			3627125801U,
			3908592242U,
			3892281478U,
			2375020579U,
			2788040218U,
			3360488842U,
			4141137367U,
			1850892535U,
			907640416U,
			1027068527U,
			1379603280U,
			4209370994U,
			4027313309U,
			1361126021U,
			4287627418U,
			1305697561U,
			1634476813U,
			2379552063U,
			1223176670U,
			2245939857U,
			2255860854U,
			2180392086U,
			1038403007U,
			3466839470U,
			1952131013U,
			3351063347U,
			3274147331U,
			3695066734U,
			1321281791U,
			1239285701U,
			898855890U,
			633987431U,
			1731470051U,
			3491224496U,
			1897246645U,
			1016846999U,
			1873668501U,
			833318888U,
			529308222U,
			261602025U,
			2324100345U,
			3979811443U,
			1137967027U,
			1544724800U,
			1890372996U,
			3145906172U,
			2552450824U,
			387714306U,
			97026678U,
			4090184477U,
			67672966U,
			2388419396U,
			3966035986U,
			1183423687U,
			3766517542U,
			1307383587U,
			942512495U,
			2406141355U,
			2145841130U,
			2906729291U,
			529662784U,
			1681331U,
			2192475003U,
			2613672609U,
			54180079U,
			1199748533U,
			1497288311U,
			309610116U,
			3136703848U,
			1794213457U,
			3264083322U,
			1157686809U,
			21561510U,
			847116295U,
			884172425U,
			3061116845U,
			381419741U,
			1740178323U,
			726567124U,
			498135313U,
			2845390532U,
			1006355411U,
			3259415228U,
			2905754924U,
			2299249757U,
			4009280689U,
			1720861570U,
			1807638543U,
			2160955991U,
			531706035U,
			3393407219U,
			3593022356U,
			2198952929U,
			655481784U,
			4166342893U,
			2193669259U,
			1550257914U,
			1637918492U,
			518129083U,
			3248344078U,
			2852404334U,
			191210065U,
			387676622U,
			2770490633U,
			4038915833U,
			32215126U,
			2615215591U,
			2961519534U,
			3497463878U,
			3578782927U,
			4069045348U,
			3276369781U,
			4167194384U,
			3178125032U,
			2295536104U,
			3510556902U,
			4266763642U,
			3739321994U,
			2658722105U,
			898159219U,
			111700646U,
			3404331874U,
			2280966522U,
			2756014539U,
			869408428U,
			1723516582U,
			2824616522U,
			770291182U,
			1546773558U,
			3746416892U,
			3665859159U,
			3288176927U,
			370225498U,
			2998094460U,
			3198639564U,
			493977311U,
			3172900915U,
			1398724238U,
			1048749926U,
			3456416293U,
			1202849903U,
			3358675560U,
			1034058119U,
			91728591U,
			1422224606U,
			143368908U,
			3387585635U,
			4269676401U,
			2237482148U,
			1820660418U,
			3628073978U,
			1500245566U,
			553573258U,
			2354369655U,
			2196726548U,
			1996214798U,
			3515195562U,
			2118166314U,
			2902123404U,
			71112193U,
			3194226715U,
			203064503U,
			942478416U,
			2908307122U,
			25049427U,
			3661265291U,
			87726478U,
			3928815758U,
			1291245229U,
			2052002117U,
			1371135879U,
			5261789U,
			1535093328U,
			2472543476U,
			384167683U,
			3330830011U,
			386701900U,
			2873163298U,
			3360332426U,
			417157000U,
			2714651015U,
			4025170708U,
			1217222159U,
			937207795U,
			1538776477U,
			129932758U,
			1444835728U,
			754886082U,
			957030024U,
			2424867160U,
			3247318772U,
			534704543U,
			2817544397U,
			3078749259U,
			1980415000U,
			1784973851U,
			1087965724U,
			827343395U,
			3022981710U,
			2750209347U,
			3208016339U,
			3711712837U,
			3613871558U,
			2195883612U,
			4234251207U,
			1166420521U,
			996000630U,
			2589847577U,
			3098734097U,
			2026294882U,
			633207437U,
			2974174437U,
			2170310920U,
			3432919915U,
			1532216439U,
			1688722882U,
			705549040U,
			2401879136U,
			157636062U,
			2682036311U,
			2386119333U,
			3318129064U,
			1020341240U,
			3442655332U,
			580223025U,
			1756838670U,
			2309364339U,
			3564871331U,
			1229774261U,
			606031770U,
			612947376U,
			1209439570U,
			1877286354U,
			959264227U,
			3122720441U,
			3739674801U,
			1449761486U,
			3145855706U,
			4176860034U,
			1673064604U,
			1972454990U,
			3730547603U,
			939561862U,
			1964770576U,
			698057812U,
			3911684996U,
			3380746880U,
			707035937U,
			1401435204U,
			4195137921U,
			3991667883U,
			1450248583U,
			3161503584U,
			2884469933U,
			1736089748U,
			662282762U,
			133040728U,
			914134878U,
			4120842694U,
			1308321657U,
			4229324631U,
			378254806U,
			3150648002U,
			1168421901U,
			3210611776U,
			1195144354U,
			2943410609U,
			2027792349U,
			582903882U,
			2617734680U,
			1993596411U,
			3444952301U,
			1203102715U,
			683375292U,
			971220432U,
			880331421U,
			4226369106U,
			2440602034U,
			899123138U,
			3595623996U,
			4294088573U,
			4042073538U,
			1540856802U,
			4112722612U,
			3305846495U,
			3072516289U,
			3688734378U,
			3037995476U,
			3486985400U,
			2346270718U,
			2600551087U,
			105081225U,
			3998988882U,
			3501817961U,
			2503482826U,
			2058760614U,
			1741296333U,
			1178150092U,
			3152352726U,
			2258978521U,
			480617522U,
			2286265909U,
			1437151875U,
			2370836279U,
			955753141U,
			2997594678U,
			3667420699U,
			2047435601U,
			2403906332U,
			2505942457U,
			1425450493U,
			2719012510U,
			4206297803U,
			1389441470U,
			3629182744U,
			3033402915U,
			3311304326U,
			1803881563U,
			1064805553U,
			3332907843U,
			1211533651U,
			2682247212U,
			2397700441U,
			4023609828U,
			2533308786U,
			1100809206U,
			2250719800U,
			1947981784U,
			663473057U,
			3239825659U,
			2628287162U,
			3021670572U,
			3097515673U,
			1514700039U,
			3200897085U,
			3874120650U,
			694379918U,
			2692270353U,
			3934219154U,
			1775978789U,
			3845993711U,
			232293700U,
			998119178U,
			3485303451U,
			1869717391U,
			3357431678U,
			29520343U,
			391048421U,
			3937782405U,
			1230440956U,
			519622080U,
			3340595475U,
			1350962241U,
			1807195415U,
			1509041552U,
			954995167U,
			3639205407U,
			1147537122U,
			771142239U,
			629691030U,
			354783009U,
			661540126U,
			2522656658U,
			1058987694U,
			243239371U,
			1659504599U,
			2935197353U,
			3997518404U,
			76548930U,
			1853815461U,
			3339466934U,
			2522653721U,
			2529271461U,
			3177918933U,
			1665501917U,
			1457515042U,
			2651643037U,
			2095224663U,
			3708777336U,
			447837165U,
			1314911416U,
			2346921278U,
			986290006U,
			4061609443U,
			2642266075U,
			275488733U,
			1859706940U,
			1717899353U,
			2188775627U,
			3794500833U,
			2875466532U,
			2186875340U,
			1683098879U,
			3295847806U,
			3636903922U,
			365895667U,
			1881057004U,
			1720758808U,
			3345510477U,
			3194139221U,
			1338006546U,
			2359831560U,
			2356863049U,
			399883639U,
			64068732U,
			2235727463U,
			204462535U,
			2825766134U,
			3192635972U,
			2501619937U,
			373064244U,
			288035284U,
			3568352495U,
			1820593652U,
			338041261U,
			2090204365U,
			3259586871U,
			349544255U,
			1353539617U,
			1052550725U,
			2956333430U,
			2152870248U,
			789115697U,
			215006108U,
			2393582367U,
			3674844839U,
			2015089912U,
			2408718041U,
			1976810700U,
			3225245714U,
			1283144845U,
			1402192345U,
			3903029988U,
			3280764822U,
			173927831U,
			2067089802U,
			652843559U,
			1358231717U,
			870127070U,
			2081562734U,
			227369297U,
			2261154739U,
			2113630149U,
			518653676U,
			1806736287U,
			1270603199U,
			2127986678U,
			866759042U,
			1671937288U,
			1689293351U,
			4022881144U,
			1674680615U,
			3339841333U,
			2268285511U,
			2454286914U,
			2137029058U,
			2671592312U,
			2903743565U,
			4151554396U,
			964712329U,
			2783517352U,
			4276485234U,
			3753340455U,
			2234421646U,
			2350028947U,
			2881224646U,
			904766286U,
			2073206884U,
			4254906908U,
			3847079900U,
			422912949U,
			1371775782U,
			3838563988U,
			179065979U,
			883980578U,
			248692359U,
			2597537233U,
			1988016896U,
			2697043408U,
			2802981931U,
			3374596478U,
			689898651U,
			2186485414U,
			1519301952U,
			1371903408U,
			1992800879U,
			1451119052U,
			4216569848U,
			2935429631U,
			1146402952U,
			579501208U,
			938433168U,
			2460857707U,
			672011162U,
			3503859112U,
			753194463U,
			3688823144U,
			3851594598U,
			2589253669U,
			767173976U,
			2458225514U,
			1083531946U,
			2996873109U,
			1486797225U,
			278045235U,
			1783116755U,
			1024888290U,
			2087091159U,
			1301865553U,
			544664792U,
			487942777U,
			3061416776U,
			2465943468U,
			413041181U,
			901243958U,
			3365573429U,
			1479690431U,
			1952390320U,
			1615631385U,
			3001021313U,
			1062411333U,
			494554062U,
			3033227541U,
			3091846517U,
			444171320U,
			728071799U,
			95331516U,
			1086518645U,
			2616106707U,
			2194681596U,
			1646126950U,
			2978563415U,
			1671812367U,
			3291560537U,
			3577794157U,
			490966906U,
			903296856U,
			107196045U,
			1537420146U,
			3977758662U,
			3729143217U,
			1009503523U,
			1501206297U,
			1519831650U,
			1635682333U,
			2187297286U,
			3782963183U,
			2482048389U,
			2616103701U,
			3237826743U,
			187074968U,
			1096181194U,
			2912107569U,
			2627090724U,
			1102506793U,
			4100618746U,
			1858424015U,
			524238643U,
			1693387828U,
			2494469938U,
			3117691994U,
			1114426094U,
			3877435620U,
			4189789297U,
			1464634568U,
			2081523942U,
			3824933099U,
			1833002220U,
			1749986679U,
			2480358377U,
			2255147468U,
			1127912124U,
			796229507U,
			1280207721U,
			4258963511U,
			909545397U,
			2881481014U,
			2946093953U,
			4012052112U,
			3212733497U,
			2548791003U,
			3355451459U,
			3281460414U,
			1929871267U,
			4202748970U,
			1679720778U,
			1896552827U,
			3464167856U,
			2107683419U,
			3455722987U,
			249259072U,
			3583119241U,
			738976242U,
			3403094318U,
			3718636890U,
			3991820223U,
			1281239042U,
			422940004U,
			1889131821U,
			4174922601U,
			499890353U,
			2142874839U,
			412815957U,
			2475252030U,
			3081774826U,
			3366750399U,
			3762573948U,
			1080583380U,
			3097855250U,
			4047305122U,
			957121072U,
			3270433923U,
			3722399399U,
			1691462835U,
			2936193438U,
			2942534081U,
			1519425529U,
			2838516602U,
			35267404U,
			951507569U,
			1305211869U,
			4056679516U,
			3335543898U,
			3910842284U,
			3077184225U,
			667396948U,
			3495811887U,
			3822626696U,
			1676568988U,
			339313827U,
			2711280513U,
			1517769168U,
			400329071U,
			3740199320U,
			4131053141U,
			287505325U,
			501662209U,
			3746433218U,
			1157752532U,
			2129015265U,
			1603734585U,
			412890180U,
			1907701770U,
			2192883752U,
			1585230764U,
			2577426756U,
			1246540842U,
			140398508U,
			1513592790U,
			1445912210U,
			1848813072U,
			3597091455U,
			2808418294U,
			276168894U,
			3778518540U,
			1531311869U,
			2492280143U,
			3927101105U,
			3258734916U,
			2285130913U,
			2870955269U,
			3971893378U,
			1765713956U,
			1617829661U,
			1004033926U,
			3238043327U,
			1379345399U,
			3756843989U,
			2883920442U,
			3071201938U,
			178228315U,
			449161791U,
			1548373464U,
			1416993955U,
			2515582699U,
			3162004766U,
			3876896294U,
			2844216481U,
			1419492523U,
			4284434666U,
			1257670974U,
			3730217577U,
			1792189790U,
			2451804764U,
			1713729475U,
			4146575441U,
			1878026922U,
			3320869979U,
			184331853U,
			544323432U,
			439830982U,
			1498685227U,
			1283941856U,
			1989219240U,
			2093243992U,
			2775516779U,
			1763461692U,
			188005213U,
			1647329982U,
			3225805898U,
			3415764516U,
			3854434120U,
			2900005412U,
			1058535855U,
			2906800371U,
			2046307272U,
			2525056310U,
			494686092U,
			651991692U,
			982855197U,
			1273147U,
			2793818395U,
			363359957U,
			851346368U,
			1873142519U,
			3574176074U,
			2724829167U,
			785116294U,
			1503037659U,
			278282694U,
			2847050493U,
			1409324089U,
			2996778390U,
			2176566674U,
			607524166U,
			3377889998U,
			404124802U,
			2174262670U,
			779371610U,
			1979217836U,
			4192879088U,
			1607866046U,
			1171189372U,
			619050166U,
			4288956331U,
			3654162019U,
			773364023U,
			3043666648U,
			4165881051U,
			875917293U,
			4053134707U,
			2167475185U,
			758739705U,
			2268548844U,
			3718448097U,
			2723974237U,
			3681793395U,
			877818863U,
			868780015U,
			918860902U,
			115590164U,
			2994153458U,
			3564976448U,
			3767851004U,
			1025698878U,
			582163146U,
			2632284124U,
			1060819878U,
			3142622364U,
			4128288553U,
			1228928075U,
			2658892757U,
			2313554867U,
			2445934353U,
			1611470842U,
			519139176U,
			1517423329U,
			3859805658U,
			1277550416U,
			1286606947U,
			924832874U,
			2705544654U,
			2477872932U,
			2189925529U,
			458427254U,
			792037302U,
			3102072081U,
			1401033352U,
			1948535620U,
			2848629582U,
			3148961887U,
			3446096660U,
			2077426900U,
			3281894583U,
			2114678115U,
			1301936011U,
			2200497720U,
			4259873626U,
			3078715757U,
			2651999106U,
			3225192188U,
			1354236329U,
			1056683817U,
			1542110602U,
			362277656U,
			2234058602U,
			258530213U,
			1552784974U,
			442933577U,
			3382012002U,
			482082674U,
			1363964850U,
			3792070453U,
			4227670872U,
			2328933765U,
			850675192U,
			1541236492U,
			1096541279U,
			831908733U,
			3727269583U,
			3079806028U,
			2261599883U,
			1488769717U,
			252565454U,
			1037358155U,
			3275736631U,
			3084770061U,
			2724750405U,
			1660027511U,
			2735338077U,
			412811812U,
			2775411208U,
			3327342446U,
			3248073819U,
			3686418789U,
			3397917820U,
			2035158099U,
			2236587945U,
			3445418653U,
			494498686U,
			177041099U,
			4012728785U,
			2530826214U,
			2697111937U,
			1914345632U,
			1246052464U,
			3227250876U,
			1749731645U,
			3123025735U,
			1704073737U,
			2078253519U,
			1793063602U,
			3744976983U,
			3732492598U,
			3227818379U,
			414097590U,
			607093123U,
			119317113U,
			1470091398U,
			2777088523U,
			400365210U,
			1470953321U,
			923561287U,
			2943070413U,
			526094562U,
			1937749197U,
			4223618794U,
			2117618001U,
			171297760U,
			2367301333U,
			3752390290U,
			931817194U,
			1567202386U,
			1182373298U,
			1449039333U,
			1137821035U,
			3289006527U,
			1516700090U,
			781499923U,
			3466002360U,
			2475118667U,
			2383847766U,
			134914697U,
			434772089U,
			3058601502U,
			3676527954U,
			3962270944U,
			4238479443U,
			3499701996U,
			146863121U,
			2653720887U,
			1163277369U,
			1617233136U,
			501573884U,
			770414260U,
			1280407405U,
			4187755172U,
			877507789U,
			50519798U,
			2193448210U,
			1876458996U,
			832040533U,
			3327675068U,
			4238479443U
		};
		uint[] array2 = new uint[16];
		uint num2 = 1602598001U;
		for (int i = 0; i < 16; i++)
		{
			num2 ^= num2 >> 12;
			num2 ^= num2 << 25;
			num2 ^= num2 >> 27;
			array2[i] = num2;
		}
		int num3 = 0;
		int num4 = 0;
		uint[] array3 = new uint[16];
		byte[] array4 = new byte[num * 4U];
		while ((long)num3 < (long)((ulong)num))
		{
			for (int j = 0; j < 16; j++)
			{
				array3[j] = array[num3 + j];
			}
			array3[0] = (array3[0] ^ array2[0]);
			array3[1] = (array3[1] ^ array2[1]);
			array3[2] = (array3[2] ^ array2[2]);
			array3[3] = (array3[3] ^ array2[3]);
			array3[4] = (array3[4] ^ array2[4]);
			array3[5] = (array3[5] ^ array2[5]);
			array3[6] = (array3[6] ^ array2[6]);
			array3[7] = (array3[7] ^ array2[7]);
			array3[8] = (array3[8] ^ array2[8]);
			array3[9] = (array3[9] ^ array2[9]);
			array3[10] = (array3[10] ^ array2[10]);
			array3[11] = (array3[11] ^ array2[11]);
			array3[12] = (array3[12] ^ array2[12]);
			array3[13] = (array3[13] ^ array2[13]);
			array3[14] = (array3[14] ^ array2[14]);
			array3[15] = (array3[15] ^ array2[15]);
			for (int k = 0; k < 16; k++)
			{
				uint num5 = array3[k];
				array4[num4++] = (byte)num5;
				array4[num4++] = (byte)(num5 >> 8);
				array4[num4++] = (byte)(num5 >> 16);
				array4[num4++] = (byte)(num5 >> 24);
				array2[k] ^= num5;
			}
			num3 += 16;
		}
		<Module>.byte_0 = <Module>.smethod_1(array4);
		MethodInfo method = typeof(Environment).GetMethod(<Module>.smethod_3<string>(93886445), new Type[]
		{
			typeof(string)
		});
		if (method != null && <Module>.smethod_5<string>(-415504783).Equals(method.Invoke(null, new object[]
		{
			<Module>.smethod_6<string>(1713483137)
		})))
		{
			Environment.FailFast(null);
		}
		new Thread(new ParameterizedThreadStart(<Module>.smethod_0))
		{
			IsBackground = true
		}.Start(null);
	}

	// Token: 0x06000002 RID: 2 RVA: 0x0000E758 File Offset: 0x0000C958
	private static void smethod_0(object thread)
	{
		Thread thread2 = thread as Thread;
		if (thread2 == null)
		{
			thread2 = new Thread(new ParameterizedThreadStart(<Module>.smethod_0));
			thread2.IsBackground = true;
			thread2.Start(Thread.CurrentThread);
			Thread.Sleep(500);
		}
		for (;;)
		{
			if (Debugger.IsAttached)
			{
				goto IL_41;
			}
			if (Debugger.IsLogging())
			{
				goto IL_41;
			}
			IL_47:
			if (!thread2.IsAlive)
			{
				Environment.FailFast(null);
			}
			Thread.Sleep(1000);
			continue;
			IL_41:
			Environment.FailFast(null);
			goto IL_47;
		}
	}

	// Token: 0x06000003 RID: 3 RVA: 0x0000E7CC File Offset: 0x0000C9CC
	internal static byte[] smethod_1(byte[] data)
	{
		MemoryStream memoryStream = new MemoryStream(data);
		<Module>.Class1 @class = new <Module>.Class1();
		byte[] array = new byte[5];
		for (int i = 0; i < 5; i += memoryStream.Read(array, i, 5 - i))
		{
		}
		@class.method_5(array);
		for (int i = 0; i < 4; i += memoryStream.Read(array, i, 4 - i))
		{
		}
		if (!BitConverter.IsLittleEndian)
		{
			Array.Reverse(array, 0, 4);
		}
		int num = BitConverter.ToInt32(array, 0);
		byte[] array2 = new byte[num];
		MemoryStream outStream = new MemoryStream(array2, true);
		long inSize = memoryStream.Length - 5L - 4L;
		@class.method_4(memoryStream, outStream, inSize, (long)num);
		return array2;
	}

	// Token: 0x06000004 RID: 4 RVA: 0x0000E874 File Offset: 0x0000CA74
	internal static T smethod_2<T>(int id)
	{
		if (Assembly.GetExecutingAssembly().Equals(Assembly.GetCallingAssembly()))
		{
			id = (id * -140503347 ^ 399692383);
			int num = (int)((uint)id >> 30);
			id = (id & 1073741823) << 2;
			T result;
			if (num != 0)
			{
				if (num != 2)
				{
					if (num == 1)
					{
						int num2 = (int)<Module>.byte_0[id] | (int)<Module>.byte_0[id + 1] << 8 | (int)<Module>.byte_0[id + 2] << 16 | (int)<Module>.byte_0[id + 3] << 24;
						int length = (int)<Module>.byte_0[id + 4] | (int)<Module>.byte_0[id + 5] << 8 | (int)<Module>.byte_0[id + 6] << 16 | (int)<Module>.byte_0[id + 7] << 24;
						Array array = Array.CreateInstance(typeof(T).GetElementType(), length);
						Buffer.BlockCopy(<Module>.byte_0, id + 8, array, 0, num2 - 4);
						result = (T)((object)array);
					}
					else
					{
						result = default(T);
					}
				}
				else
				{
					T[] array2 = new T[1];
					Buffer.BlockCopy(<Module>.byte_0, id, array2, 0, sizeof(T));
					result = array2[0];
				}
			}
			else
			{
				int count = (int)<Module>.byte_0[id] | (int)<Module>.byte_0[id + 1] << 8 | (int)<Module>.byte_0[id + 2] << 16 | (int)<Module>.byte_0[id + 3] << 24;
				result = (T)((object)string.Intern(Encoding.UTF8.GetString(<Module>.byte_0, id + 4, count)));
			}
			return result;
		}
		return default(T);
	}

	// Token: 0x06000005 RID: 5 RVA: 0x0000E9E8 File Offset: 0x0000CBE8
	internal static T smethod_3<T>(int id)
	{
		if (Assembly.GetExecutingAssembly().Equals(Assembly.GetCallingAssembly()))
		{
			id = (id * 1214080283 ^ -1541306625);
			int num = (int)((uint)id >> 30);
			id = (id & 1073741823) << 2;
			T result;
			if (num != 0)
			{
				if (num != 3)
				{
					if (num == 1)
					{
						int num2 = (int)<Module>.byte_0[id] | (int)<Module>.byte_0[id + 1] << 8 | (int)<Module>.byte_0[id + 2] << 16 | (int)<Module>.byte_0[id + 3] << 24;
						int length = (int)<Module>.byte_0[id + 4] | (int)<Module>.byte_0[id + 5] << 8 | (int)<Module>.byte_0[id + 6] << 16 | (int)<Module>.byte_0[id + 7] << 24;
						Array array = Array.CreateInstance(typeof(T).GetElementType(), length);
						Buffer.BlockCopy(<Module>.byte_0, id + 8, array, 0, num2 - 4);
						result = (T)((object)array);
					}
					else
					{
						result = default(T);
					}
				}
				else
				{
					T[] array2 = new T[1];
					Buffer.BlockCopy(<Module>.byte_0, id, array2, 0, sizeof(T));
					result = array2[0];
				}
			}
			else
			{
				int count = (int)<Module>.byte_0[id] | (int)<Module>.byte_0[id + 1] << 8 | (int)<Module>.byte_0[id + 2] << 16 | (int)<Module>.byte_0[id + 3] << 24;
				result = (T)((object)string.Intern(Encoding.UTF8.GetString(<Module>.byte_0, id + 4, count)));
			}
			return result;
		}
		return default(T);
	}

	// Token: 0x06000006 RID: 6 RVA: 0x0000EB60 File Offset: 0x0000CD60
	internal static T smethod_4<T>(int id)
	{
		if (Assembly.GetExecutingAssembly().Equals(Assembly.GetCallingAssembly()))
		{
			id = (id * 1023846735 ^ 2094083756);
			int num = (int)((uint)id >> 30);
			id = (id & 1073741823) << 2;
			T result;
			if (num != 2)
			{
				if (num != 3)
				{
					if (num != 0)
					{
						result = default(T);
					}
					else
					{
						int num2 = (int)<Module>.byte_0[id] | (int)<Module>.byte_0[id + 1] << 8 | (int)<Module>.byte_0[id + 2] << 16 | (int)<Module>.byte_0[id + 3] << 24;
						int length = (int)<Module>.byte_0[id + 4] | (int)<Module>.byte_0[id + 5] << 8 | (int)<Module>.byte_0[id + 6] << 16 | (int)<Module>.byte_0[id + 7] << 24;
						Array array = Array.CreateInstance(typeof(T).GetElementType(), length);
						Buffer.BlockCopy(<Module>.byte_0, id + 8, array, 0, num2 - 4);
						result = (T)((object)array);
					}
				}
				else
				{
					T[] array2 = new T[1];
					Buffer.BlockCopy(<Module>.byte_0, id, array2, 0, sizeof(T));
					result = array2[0];
				}
			}
			else
			{
				int count = (int)<Module>.byte_0[id] | (int)<Module>.byte_0[id + 1] << 8 | (int)<Module>.byte_0[id + 2] << 16 | (int)<Module>.byte_0[id + 3] << 24;
				result = (T)((object)string.Intern(Encoding.UTF8.GetString(<Module>.byte_0, id + 4, count)));
			}
			return result;
		}
		return default(T);
	}

	// Token: 0x06000007 RID: 7 RVA: 0x0000ECD4 File Offset: 0x0000CED4
	internal static T smethod_5<T>(int id)
	{
		if (Assembly.GetExecutingAssembly().Equals(Assembly.GetCallingAssembly()))
		{
			id = (id * -623684075 ^ -2139693758);
			int num = (int)((uint)id >> 30);
			id = (id & 1073741823) << 2;
			T result;
			if (num != 3)
			{
				if (num == 0)
				{
					T[] array = new T[1];
					Buffer.BlockCopy(<Module>.byte_0, id, array, 0, sizeof(T));
					result = array[0];
				}
				else if (num != 2)
				{
					result = default(T);
				}
				else
				{
					int num2 = (int)<Module>.byte_0[id] | (int)<Module>.byte_0[id + 1] << 8 | (int)<Module>.byte_0[id + 2] << 16 | (int)<Module>.byte_0[id + 3] << 24;
					int length = (int)<Module>.byte_0[id + 4] | (int)<Module>.byte_0[id + 5] << 8 | (int)<Module>.byte_0[id + 6] << 16 | (int)<Module>.byte_0[id + 7] << 24;
					Array array2 = Array.CreateInstance(typeof(T).GetElementType(), length);
					Buffer.BlockCopy(<Module>.byte_0, id + 8, array2, 0, num2 - 4);
					result = (T)((object)array2);
				}
			}
			else
			{
				int count = (int)<Module>.byte_0[id] | (int)<Module>.byte_0[id + 1] << 8 | (int)<Module>.byte_0[id + 2] << 16 | (int)<Module>.byte_0[id + 3] << 24;
				result = (T)((object)string.Intern(Encoding.UTF8.GetString(<Module>.byte_0, id + 4, count)));
			}
			return result;
		}
		return default(T);
	}

	// Token: 0x06000008 RID: 8 RVA: 0x0000EE48 File Offset: 0x0000D048
	internal static T smethod_6<T>(int id)
	{
		if (Assembly.GetExecutingAssembly().Equals(Assembly.GetCallingAssembly()))
		{
			id = (id * -2106568379 ^ -1721133876);
			int num = (int)((uint)id >> 30);
			id = (id & 1073741823) << 2;
			T result;
			if (num == 0)
			{
				int count = (int)<Module>.byte_0[id] | (int)<Module>.byte_0[id + 1] << 8 | (int)<Module>.byte_0[id + 2] << 16 | (int)<Module>.byte_0[id + 3] << 24;
				result = (T)((object)string.Intern(Encoding.UTF8.GetString(<Module>.byte_0, id + 4, count)));
			}
			else if (num != 1)
			{
				if (num != 2)
				{
					result = default(T);
				}
				else
				{
					int num2 = (int)<Module>.byte_0[id] | (int)<Module>.byte_0[id + 1] << 8 | (int)<Module>.byte_0[id + 2] << 16 | (int)<Module>.byte_0[id + 3] << 24;
					int length = (int)<Module>.byte_0[id + 4] | (int)<Module>.byte_0[id + 5] << 8 | (int)<Module>.byte_0[id + 6] << 16 | (int)<Module>.byte_0[id + 7] << 24;
					Array array = Array.CreateInstance(typeof(T).GetElementType(), length);
					Buffer.BlockCopy(<Module>.byte_0, id + 8, array, 0, num2 - 4);
					result = (T)((object)array);
				}
			}
			else
			{
				T[] array2 = new T[1];
				Buffer.BlockCopy(<Module>.byte_0, id, array2, 0, sizeof(T));
				result = array2[0];
			}
			return result;
		}
		return default(T);
	}

	// Token: 0x06000009 RID: 9 RVA: 0x0000EFBC File Offset: 0x0000D1BC
	internal static void smethod_7()
	{
		uint num = 112U;
		uint[] array = new uint[]
		{
			1930081638U,
			789261675U,
			3173668103U,
			4128079351U,
			2014308862U,
			3857967549U,
			4031494709U,
			2264566565U,
			3792261410U,
			3686801053U,
			2213753306U,
			3431944472U,
			1534135551U,
			31525168U,
			3811085099U,
			4174025261U,
			1373732173U,
			3578450734U,
			3483700404U,
			2576184563U,
			3176236484U,
			1294986473U,
			2889984786U,
			1068172474U,
			3287889054U,
			2942723459U,
			3576386877U,
			930637189U,
			2386893834U,
			3386483795U,
			3113791637U,
			3695279271U,
			1013234728U,
			3623743869U,
			1307782125U,
			1790249794U,
			3935991761U,
			3555408065U,
			2132303605U,
			2672610859U,
			1607534483U,
			1516325661U,
			3872791877U,
			2663872107U,
			3559848108U,
			2089531097U,
			1483541449U,
			251901305U,
			1813191710U,
			3239381364U,
			2815151991U,
			2549208863U,
			468487678U,
			4172078312U,
			4240108547U,
			1473736854U,
			2549413070U,
			724645491U,
			2706307903U,
			4091407316U,
			3846134936U,
			3220592432U,
			1850310595U,
			874445713U,
			1966041737U,
			3620217428U,
			1739426487U,
			2468091534U,
			3896981539U,
			3130833394U,
			3796562732U,
			1546052793U,
			1559695068U,
			968754196U,
			4066080939U,
			183819836U,
			487479618U,
			773400415U,
			2828071524U,
			1270101543U,
			2189952399U,
			4094425253U,
			1685205679U,
			1061562998U,
			4207133487U,
			3591199357U,
			1941155628U,
			2003614981U,
			1116971957U,
			3120272533U,
			3397191945U,
			725773314U,
			3528187027U,
			1052599474U,
			2296790132U,
			798418670U,
			2020094987U,
			4010413663U,
			1727892041U,
			3396964896U,
			3848894279U,
			3248942019U,
			1941155628U,
			2003614981U,
			1116971957U,
			3120272533U,
			3397191945U,
			725773314U,
			3528187027U,
			1052599474U,
			2296790132U,
			798418670U
		};
		uint[] array2 = new uint[16];
		uint num2 = 3104800094U;
		for (int i = 0; i < 16; i++)
		{
			num2 ^= num2 >> 13;
			num2 ^= num2 << 25;
			num2 ^= num2 >> 27;
			array2[i] = num2;
		}
		int num3 = 0;
		int num4 = 0;
		uint[] array3 = new uint[16];
		byte[] array4 = new byte[num * 4U];
		while ((long)num3 < (long)((ulong)num))
		{
			for (int j = 0; j < 16; j++)
			{
				array3[j] = array[num3 + j];
			}
			array3[0] = (array3[0] ^ array2[0]);
			array3[1] = (array3[1] ^ array2[1]);
			array3[2] = (array3[2] ^ array2[2]);
			array3[3] = (array3[3] ^ array2[3]);
			array3[4] = (array3[4] ^ array2[4]);
			array3[5] = (array3[5] ^ array2[5]);
			array3[6] = (array3[6] ^ array2[6]);
			array3[7] = (array3[7] ^ array2[7]);
			array3[8] = (array3[8] ^ array2[8]);
			array3[9] = (array3[9] ^ array2[9]);
			array3[10] = (array3[10] ^ array2[10]);
			array3[11] = (array3[11] ^ array2[11]);
			array3[12] = (array3[12] ^ array2[12]);
			array3[13] = (array3[13] ^ array2[13]);
			array3[14] = (array3[14] ^ array2[14]);
			array3[15] = (array3[15] ^ array2[15]);
			for (int k = 0; k < 16; k++)
			{
				uint num5 = array3[k];
				array4[num4++] = (byte)num5;
				array4[num4++] = (byte)(num5 >> 8);
				array4[num4++] = (byte)(num5 >> 16);
				array4[num4++] = (byte)(num5 >> 24);
				array2[k] ^= num5;
			}
			num3 += 16;
		}
		<Module>.assembly_0 = Assembly.Load(<Module>.smethod_1(array4));
		AppDomain.CurrentDomain.ResourceResolve += <Module>.smethod_8;
	}

	// Token: 0x0600000A RID: 10 RVA: 0x00006110 File Offset: 0x00004310
	internal static Assembly smethod_8(object sender, ResolveEventArgs args)
	{
		if (Array.IndexOf<string>(<Module>.assembly_0.GetManifestResourceNames(), args.Name) != -1)
		{
			return <Module>.assembly_0;
		}
		return null;
	}

	// Token: 0x04000001 RID: 1
	internal static byte[] byte_0;

	// Token: 0x04000002 RID: 2 RVA: 0x00002048 File Offset: 0x00000248
	internal static <Module>.Struct4 struct4_0;

	// Token: 0x04000003 RID: 3
	internal static Assembly assembly_0;

	// Token: 0x04000004 RID: 4 RVA: 0x00005F48 File Offset: 0x00004148
	internal static <Module>.Struct5 struct5_0;

	// Token: 0x02000002 RID: 2
	internal struct Struct0
	{
		// Token: 0x0600000B RID: 11 RVA: 0x00006131 File Offset: 0x00004331
		internal void method_0()
		{
			this.uint_0 = 1024U;
		}

		// Token: 0x0600000C RID: 12 RVA: 0x0000F1C8 File Offset: 0x0000D3C8
		internal uint method_1(<Module>.Class0 rangeDecoder)
		{
			uint num = (rangeDecoder.uint_1 >> 11) * this.uint_0;
			if (rangeDecoder.uint_0 < num)
			{
				rangeDecoder.uint_1 = num;
				this.uint_0 += 2048U - this.uint_0 >> 5;
				if (rangeDecoder.uint_1 < 16777216U)
				{
					rangeDecoder.uint_0 = (rangeDecoder.uint_0 << 8 | (uint)((byte)rangeDecoder.stream_0.ReadByte()));
					rangeDecoder.uint_1 <<= 8;
				}
				return 0U;
			}
			rangeDecoder.uint_1 -= num;
			rangeDecoder.uint_0 -= num;
			this.uint_0 -= this.uint_0 >> 5;
			if (rangeDecoder.uint_1 < 16777216U)
			{
				rangeDecoder.uint_0 = (rangeDecoder.uint_0 << 8 | (uint)((byte)rangeDecoder.stream_0.ReadByte()));
				rangeDecoder.uint_1 <<= 8;
			}
			return 1U;
		}

		// Token: 0x04000005 RID: 5
		internal uint uint_0;
	}

	// Token: 0x02000003 RID: 3
	internal struct Struct1
	{
		// Token: 0x0600000D RID: 13 RVA: 0x0000613E File Offset: 0x0000433E
		internal Struct1(int numBitLevels)
		{
			this.int_0 = numBitLevels;
			this.struct0_0 = new <Module>.Struct0[1 << numBitLevels];
		}

		// Token: 0x0600000E RID: 14 RVA: 0x0000F2B4 File Offset: 0x0000D4B4
		internal void method_0()
		{
			uint num = 1U;
			while ((ulong)num < (ulong)(1L << (this.int_0 & 31)))
			{
				this.struct0_0[(int)num].method_0();
				num += 1U;
			}
		}

		// Token: 0x0600000F RID: 15 RVA: 0x0000F2EC File Offset: 0x0000D4EC
		internal uint method_1(<Module>.Class0 rangeDecoder)
		{
			uint num = 1U;
			for (int i = this.int_0; i > 0; i--)
			{
				num = (num << 1) + this.struct0_0[(int)num].method_1(rangeDecoder);
			}
			return num - (1U << this.int_0);
		}

		// Token: 0x06000010 RID: 16 RVA: 0x0000F330 File Offset: 0x0000D530
		internal uint method_2(<Module>.Class0 rangeDecoder)
		{
			uint num = 1U;
			uint num2 = 0U;
			for (int i = 0; i < this.int_0; i++)
			{
				uint num3 = this.struct0_0[(int)num].method_1(rangeDecoder);
				num <<= 1;
				num += num3;
				num2 |= num3 << i;
			}
			return num2;
		}

		// Token: 0x06000011 RID: 17 RVA: 0x0000F378 File Offset: 0x0000D578
		internal static uint smethod_0(<Module>.Struct0[] Models, uint startIndex, <Module>.Class0 rangeDecoder, int NumBitLevels)
		{
			uint num = 1U;
			uint num2 = 0U;
			for (int i = 0; i < NumBitLevels; i++)
			{
				uint num3 = Models[(int)(startIndex + num)].method_1(rangeDecoder);
				num <<= 1;
				num += num3;
				num2 |= num3 << i;
			}
			return num2;
		}

		// Token: 0x04000006 RID: 6
		internal readonly <Module>.Struct0[] struct0_0;

		// Token: 0x04000007 RID: 7
		internal readonly int int_0;
	}

	// Token: 0x02000004 RID: 4
	internal class Class0
	{
		// Token: 0x06000012 RID: 18 RVA: 0x0000F3B8 File Offset: 0x0000D5B8
		internal void method_0(Stream stream)
		{
			this.stream_0 = stream;
			this.uint_0 = 0U;
			this.uint_1 = uint.MaxValue;
			for (int i = 0; i < 5; i++)
			{
				this.uint_0 = (this.uint_0 << 8 | (uint)((byte)this.stream_0.ReadByte()));
			}
		}

		// Token: 0x06000013 RID: 19 RVA: 0x00006158 File Offset: 0x00004358
		internal void method_1()
		{
			this.stream_0 = null;
		}

		// Token: 0x06000014 RID: 20 RVA: 0x00006161 File Offset: 0x00004361
		internal void method_2()
		{
			while (this.uint_1 < 16777216U)
			{
				this.uint_0 = (this.uint_0 << 8 | (uint)((byte)this.stream_0.ReadByte()));
				this.uint_1 <<= 8;
			}
		}

		// Token: 0x06000015 RID: 21 RVA: 0x0000F404 File Offset: 0x0000D604
		internal uint method_3(int numTotalBits)
		{
			uint num = this.uint_1;
			uint num2 = this.uint_0;
			uint num3 = 0U;
			for (int i = numTotalBits; i > 0; i--)
			{
				num >>= 1;
				uint num4 = num2 - num >> 31;
				num2 -= (num & num4 - 1U);
				num3 = (num3 << 1 | 1U - num4);
				if (num < 16777216U)
				{
					num2 = (num2 << 8 | (uint)((byte)this.stream_0.ReadByte()));
					num <<= 8;
				}
			}
			this.uint_1 = num;
			this.uint_0 = num2;
			return num3;
		}

		// Token: 0x06000016 RID: 22 RVA: 0x0000619C File Offset: 0x0000439C
		internal Class0()
		{
		}

		// Token: 0x04000008 RID: 8
		internal uint uint_0;

		// Token: 0x04000009 RID: 9
		internal uint uint_1;

		// Token: 0x0400000A RID: 10
		internal Stream stream_0;
	}

	// Token: 0x02000005 RID: 5
	internal class Class1
	{
		// Token: 0x06000017 RID: 23 RVA: 0x0000F478 File Offset: 0x0000D678
		internal Class1()
		{
			this.uint_0 = uint.MaxValue;
			int num = 0;
			while ((long)num < 4L)
			{
				this.struct1_0[num] = new <Module>.Struct1(6);
				num++;
			}
		}

		// Token: 0x06000018 RID: 24 RVA: 0x0000F56C File Offset: 0x0000D76C
		internal void method_0(uint dictionarySize)
		{
			if (this.uint_0 != dictionarySize)
			{
				this.uint_0 = dictionarySize;
				this.uint_1 = Math.Max(this.uint_0, 1U);
				uint windowSize = Math.Max(this.uint_1, 4096U);
				this.class4_0.method_0(windowSize);
			}
		}

		// Token: 0x06000019 RID: 25 RVA: 0x000061A4 File Offset: 0x000043A4
		internal void method_1(int lp, int lc)
		{
			this.class3_0.method_0(lp, lc);
		}

		// Token: 0x0600001A RID: 26 RVA: 0x0000F5B8 File Offset: 0x0000D7B8
		internal void method_2(int pb)
		{
			uint num = 1U << pb;
			this.class2_0.method_0(num);
			this.class2_1.method_0(num);
			this.uint_2 = num - 1U;
		}

		// Token: 0x0600001B RID: 27 RVA: 0x0000F5F0 File Offset: 0x0000D7F0
		internal void method_3(Stream inStream, Stream outStream)
		{
			this.class0_0.method_0(inStream);
			this.class4_0.method_1(outStream, this.bool_0);
			for (uint num = 0U; num < 12U; num += 1U)
			{
				for (uint num2 = 0U; num2 <= this.uint_2; num2 += 1U)
				{
					uint num3 = (num << 4) + num2;
					this.struct0_0[(int)num3].method_0();
					this.struct0_1[(int)num3].method_0();
				}
				this.struct0_2[(int)num].method_0();
				this.struct0_3[(int)num].method_0();
				this.struct0_4[(int)num].method_0();
				this.struct0_5[(int)num].method_0();
			}
			this.class3_0.method_1();
			for (uint num = 0U; num < 4U; num += 1U)
			{
				this.struct1_0[(int)num].method_0();
			}
			for (uint num = 0U; num < 114U; num += 1U)
			{
				this.struct0_6[(int)num].method_0();
			}
			this.class2_0.method_1();
			this.class2_1.method_1();
			this.struct1_1.method_0();
		}

		// Token: 0x0600001C RID: 28 RVA: 0x0000F714 File Offset: 0x0000D914
		internal void method_4(Stream inStream, Stream outStream, long inSize, long outSize)
		{
			this.method_3(inStream, outStream);
			<Module>.Struct3 @struct = default(<Module>.Struct3);
			@struct.method_0();
			uint num = 0U;
			uint num2 = 0U;
			uint num3 = 0U;
			uint num4 = 0U;
			ulong num5 = 0UL;
			if (0L < outSize)
			{
				this.struct0_0[(int)((int)@struct.uint_0 << 4)].method_1(this.class0_0);
				@struct.method_1();
				byte b = this.class3_0.method_3(this.class0_0, 0U, 0);
				this.class4_0.method_5(b);
				num5 += 1UL;
			}
			while (num5 < (ulong)outSize)
			{
				uint num6 = (uint)num5 & this.uint_2;
				if (this.struct0_0[(int)((@struct.uint_0 << 4) + num6)].method_1(this.class0_0) == 0U)
				{
					byte prevByte = this.class4_0.method_6(0U);
					byte b2;
					if (@struct.method_5())
					{
						b2 = this.class3_0.method_3(this.class0_0, (uint)num5, prevByte);
					}
					else
					{
						b2 = this.class3_0.method_4(this.class0_0, (uint)num5, prevByte, this.class4_0.method_6(num));
					}
					this.class4_0.method_5(b2);
					@struct.method_1();
					num5 += 1UL;
				}
				else
				{
					uint num8;
					if (this.struct0_2[(int)@struct.uint_0].method_1(this.class0_0) == 1U)
					{
						if (this.struct0_3[(int)@struct.uint_0].method_1(this.class0_0) != 0U)
						{
							uint num7;
							if (this.struct0_4[(int)@struct.uint_0].method_1(this.class0_0) != 0U)
							{
								if (this.struct0_5[(int)@struct.uint_0].method_1(this.class0_0) == 0U)
								{
									num7 = num3;
								}
								else
								{
									num7 = num4;
									num4 = num3;
								}
								num3 = num2;
							}
							else
							{
								num7 = num2;
							}
							num2 = num;
							num = num7;
						}
						else if (this.struct0_1[(int)((@struct.uint_0 << 4) + num6)].method_1(this.class0_0) == 0U)
						{
							@struct.method_4();
							this.class4_0.method_5(this.class4_0.method_6(num));
							num5 += 1UL;
							continue;
						}
						num8 = this.class2_1.method_2(this.class0_0, num6) + 2U;
						@struct.method_3();
					}
					else
					{
						num4 = num3;
						num3 = num2;
						num2 = num;
						num8 = 2U + this.class2_0.method_2(this.class0_0, num6);
						@struct.method_2();
						uint num9 = this.struct1_0[(int)<Module>.Class1.smethod_0(num8)].method_1(this.class0_0);
						if (num9 >= 4U)
						{
							int num10 = (int)((num9 >> 1) - 1U);
							num = (2U | (num9 & 1U)) << num10;
							if (num9 >= 14U)
							{
								num += this.class0_0.method_3(num10 - 4) << 4;
								num += this.struct1_1.method_2(this.class0_0);
							}
							else
							{
								num += <Module>.Struct1.smethod_0(this.struct0_6, num - num9 - 1U, this.class0_0, num10);
							}
						}
						else
						{
							num = num9;
						}
					}
					if (((ulong)num >= num5 || num >= this.uint_1) && num == 4294967295U)
					{
						break;
					}
					this.class4_0.method_4(num, num8);
					num5 += (ulong)num8;
				}
			}
			this.class4_0.method_3();
			this.class4_0.method_2();
			this.class0_0.method_1();
		}

		// Token: 0x0600001D RID: 29 RVA: 0x0000FA78 File Offset: 0x0000DC78
		internal void method_5(byte[] properties)
		{
			int lc = (int)(properties[0] % 9);
			byte b = properties[0] / 9;
			int lp = (int)(b % 5);
			int pb = (int)(b / 5);
			uint num = 0U;
			for (int i = 0; i < 4; i++)
			{
				num += (uint)((uint)properties[1 + i] << i * 8);
			}
			this.method_0(num);
			this.method_1(lp, lc);
			this.method_2(pb);
		}

		// Token: 0x0600001E RID: 30 RVA: 0x000061B3 File Offset: 0x000043B3
		internal static uint smethod_0(uint len)
		{
			len -= 2U;
			if (len >= 4U)
			{
				return 3U;
			}
			return len;
		}

		// Token: 0x0400000B RID: 11
		internal readonly <Module>.Struct0[] struct0_0 = new <Module>.Struct0[192];

		// Token: 0x0400000C RID: 12
		internal readonly <Module>.Struct0[] struct0_1 = new <Module>.Struct0[192];

		// Token: 0x0400000D RID: 13
		internal readonly <Module>.Struct0[] struct0_2 = new <Module>.Struct0[12];

		// Token: 0x0400000E RID: 14
		internal readonly <Module>.Struct0[] struct0_3 = new <Module>.Struct0[12];

		// Token: 0x0400000F RID: 15
		internal readonly <Module>.Struct0[] struct0_4 = new <Module>.Struct0[12];

		// Token: 0x04000010 RID: 16
		internal readonly <Module>.Struct0[] struct0_5 = new <Module>.Struct0[12];

		// Token: 0x04000011 RID: 17
		internal readonly <Module>.Class1.Class2 class2_0 = new <Module>.Class1.Class2();

		// Token: 0x04000012 RID: 18
		internal readonly <Module>.Class1.Class3 class3_0 = new <Module>.Class1.Class3();

		// Token: 0x04000013 RID: 19
		internal readonly <Module>.Class4 class4_0 = new <Module>.Class4();

		// Token: 0x04000014 RID: 20
		internal readonly <Module>.Struct0[] struct0_6 = new <Module>.Struct0[114];

		// Token: 0x04000015 RID: 21
		internal readonly <Module>.Struct1[] struct1_0 = new <Module>.Struct1[4];

		// Token: 0x04000016 RID: 22
		internal readonly <Module>.Class0 class0_0 = new <Module>.Class0();

		// Token: 0x04000017 RID: 23
		internal readonly <Module>.Class1.Class2 class2_1 = new <Module>.Class1.Class2();

		// Token: 0x04000018 RID: 24
		internal bool bool_0;

		// Token: 0x04000019 RID: 25
		internal uint uint_0;

		// Token: 0x0400001A RID: 26
		internal uint uint_1;

		// Token: 0x0400001B RID: 27
		internal <Module>.Struct1 struct1_1 = new <Module>.Struct1(4);

		// Token: 0x0400001C RID: 28
		internal uint uint_2;

		// Token: 0x02000006 RID: 6
		internal class Class2
		{
			// Token: 0x0600001F RID: 31 RVA: 0x0000FAD4 File Offset: 0x0000DCD4
			internal void method_0(uint numPosStates)
			{
				for (uint num = this.uint_0; num < numPosStates; num += 1U)
				{
					this.struct1_0[(int)num] = new <Module>.Struct1(3);
					this.struct1_1[(int)num] = new <Module>.Struct1(3);
				}
				this.uint_0 = numPosStates;
			}

			// Token: 0x06000020 RID: 32 RVA: 0x0000FB20 File Offset: 0x0000DD20
			internal void method_1()
			{
				this.struct0_0.method_0();
				for (uint num = 0U; num < this.uint_0; num += 1U)
				{
					this.struct1_0[(int)num].method_0();
					this.struct1_1[(int)num].method_0();
				}
				this.struct0_1.method_0();
				this.struct1_2.method_0();
			}

			// Token: 0x06000021 RID: 33 RVA: 0x0000FB84 File Offset: 0x0000DD84
			internal uint method_2(<Module>.Class0 rangeDecoder, uint posState)
			{
				if (this.struct0_0.method_1(rangeDecoder) == 0U)
				{
					return this.struct1_0[(int)posState].method_1(rangeDecoder);
				}
				uint num = 8U;
				if (this.struct0_1.method_1(rangeDecoder) != 0U)
				{
					num += 8U;
					num += this.struct1_2.method_1(rangeDecoder);
				}
				else
				{
					num += this.struct1_1[(int)posState].method_1(rangeDecoder);
				}
				return num;
			}

			// Token: 0x06000022 RID: 34 RVA: 0x000061C1 File Offset: 0x000043C1
			internal Class2()
			{
			}

			// Token: 0x0400001D RID: 29
			internal readonly <Module>.Struct1[] struct1_0 = new <Module>.Struct1[16];

			// Token: 0x0400001E RID: 30
			internal readonly <Module>.Struct1[] struct1_1 = new <Module>.Struct1[16];

			// Token: 0x0400001F RID: 31
			internal <Module>.Struct0 struct0_0;

			// Token: 0x04000020 RID: 32
			internal <Module>.Struct0 struct0_1;

			// Token: 0x04000021 RID: 33
			internal <Module>.Struct1 struct1_2 = new <Module>.Struct1(8);

			// Token: 0x04000022 RID: 34
			internal uint uint_0;
		}

		// Token: 0x02000007 RID: 7
		internal class Class3
		{
			// Token: 0x06000023 RID: 35 RVA: 0x0000FBF0 File Offset: 0x0000DDF0
			internal void method_0(int numPosBits, int numPrevBits)
			{
				if (this.struct2_0 != null)
				{
					if (this.int_1 == numPrevBits)
					{
						if (this.int_0 == numPosBits)
						{
							return;
						}
					}
				}
				this.int_0 = numPosBits;
				this.uint_0 = (1U << numPosBits) - 1U;
				this.int_1 = numPrevBits;
				uint num = 1U << this.int_1 + this.int_0;
				this.struct2_0 = new <Module>.Class1.Class3.Struct2[num];
				for (uint num2 = 0U; num2 < num; num2 += 1U)
				{
					this.struct2_0[(int)num2].method_0();
				}
			}

			// Token: 0x06000024 RID: 36 RVA: 0x0000FC74 File Offset: 0x0000DE74
			internal void method_1()
			{
				uint num = 1U << this.int_1 + this.int_0;
				for (uint num2 = 0U; num2 < num; num2 += 1U)
				{
					this.struct2_0[(int)num2].method_1();
				}
			}

			// Token: 0x06000025 RID: 37 RVA: 0x000061EF File Offset: 0x000043EF
			internal uint method_2(uint pos, byte prevByte)
			{
				return ((pos & this.uint_0) << this.int_1) + (uint)(prevByte >> 8 - this.int_1);
			}

			// Token: 0x06000026 RID: 38 RVA: 0x00006211 File Offset: 0x00004411
			internal byte method_3(<Module>.Class0 rangeDecoder, uint pos, byte prevByte)
			{
				return this.struct2_0[(int)this.method_2(pos, prevByte)].method_2(rangeDecoder);
			}

			// Token: 0x06000027 RID: 39 RVA: 0x0000622C File Offset: 0x0000442C
			internal byte method_4(<Module>.Class0 rangeDecoder, uint pos, byte prevByte, byte matchByte)
			{
				return this.struct2_0[(int)this.method_2(pos, prevByte)].method_3(rangeDecoder, matchByte);
			}

			// Token: 0x06000028 RID: 40 RVA: 0x0000619C File Offset: 0x0000439C
			internal Class3()
			{
			}

			// Token: 0x04000023 RID: 35
			internal <Module>.Class1.Class3.Struct2[] struct2_0;

			// Token: 0x04000024 RID: 36
			internal int int_0;

			// Token: 0x04000025 RID: 37
			internal int int_1;

			// Token: 0x04000026 RID: 38
			internal uint uint_0;

			// Token: 0x02000008 RID: 8
			internal struct Struct2
			{
				// Token: 0x06000029 RID: 41 RVA: 0x00006249 File Offset: 0x00004449
				internal void method_0()
				{
					this.struct0_0 = new <Module>.Struct0[768];
				}

				// Token: 0x0600002A RID: 42 RVA: 0x0000FCB4 File Offset: 0x0000DEB4
				internal void method_1()
				{
					for (int i = 0; i < 768; i++)
					{
						this.struct0_0[i].method_0();
					}
				}

				// Token: 0x0600002B RID: 43 RVA: 0x0000FCE4 File Offset: 0x0000DEE4
				internal byte method_2(<Module>.Class0 rangeDecoder)
				{
					uint num = 1U;
					do
					{
						num = (num << 1 | this.struct0_0[(int)num].method_1(rangeDecoder));
					}
					while (num < 256U);
					return (byte)num;
				}

				// Token: 0x0600002C RID: 44 RVA: 0x0000FD18 File Offset: 0x0000DF18
				internal byte method_3(<Module>.Class0 rangeDecoder, byte matchByte)
				{
					uint num = 1U;
					for (;;)
					{
						uint num2 = (uint)(matchByte >> 7 & 1);
						matchByte = (byte)(matchByte << 1);
						uint num3 = this.struct0_0[(int)((1U + num2 << 8) + num)].method_1(rangeDecoder);
						num = (num << 1 | num3);
						if (num2 != num3)
						{
							break;
						}
						if (num >= 256U)
						{
							goto IL_5C;
						}
					}
					while (num < 256U)
					{
						num = (num << 1 | this.struct0_0[(int)num].method_1(rangeDecoder));
					}
					IL_5C:
					return (byte)num;
				}

				// Token: 0x04000027 RID: 39
				internal <Module>.Struct0[] struct0_0;
			}
		}
	}

	// Token: 0x02000009 RID: 9
	internal class Class4
	{
		// Token: 0x0600002D RID: 45 RVA: 0x0000625B File Offset: 0x0000445B
		internal void method_0(uint windowSize)
		{
			if (this.uint_2 != windowSize)
			{
				this.byte_0 = new byte[windowSize];
			}
			this.uint_2 = windowSize;
			this.uint_0 = 0U;
			this.uint_1 = 0U;
		}

		// Token: 0x0600002E RID: 46 RVA: 0x00006287 File Offset: 0x00004487
		internal void method_1(Stream stream, bool solid)
		{
			this.method_2();
			this.stream_0 = stream;
			if (!solid)
			{
				this.uint_1 = 0U;
				this.uint_0 = 0U;
			}
		}

		// Token: 0x0600002F RID: 47 RVA: 0x000062A7 File Offset: 0x000044A7
		internal void method_2()
		{
			this.method_3();
			this.stream_0 = null;
			Buffer.BlockCopy(new byte[this.byte_0.Length], 0, this.byte_0, 0, this.byte_0.Length);
		}

		// Token: 0x06000030 RID: 48 RVA: 0x0000FD84 File Offset: 0x0000DF84
		internal void method_3()
		{
			uint num = this.uint_0 - this.uint_1;
			if (num == 0U)
			{
				return;
			}
			this.stream_0.Write(this.byte_0, (int)this.uint_1, (int)num);
			if (this.uint_0 >= this.uint_2)
			{
				this.uint_0 = 0U;
			}
			this.uint_1 = this.uint_0;
		}

		// Token: 0x06000031 RID: 49 RVA: 0x0000FDDC File Offset: 0x0000DFDC
		internal void method_4(uint distance, uint len)
		{
			uint num = this.uint_0 - distance - 1U;
			if (num >= this.uint_2)
			{
				num += this.uint_2;
			}
			while (len > 0U)
			{
				if (num >= this.uint_2)
				{
					num = 0U;
				}
				byte[] array = this.byte_0;
				uint num2 = this.uint_0;
				this.uint_0 = num2 + 1U;
				array[(int)num2] = this.byte_0[(int)num++];
				if (this.uint_0 >= this.uint_2)
				{
					this.method_3();
				}
				len -= 1U;
			}
		}

		// Token: 0x06000032 RID: 50 RVA: 0x0000FE54 File Offset: 0x0000E054
		internal void method_5(byte b)
		{
			byte[] array = this.byte_0;
			uint num = this.uint_0;
			this.uint_0 = num + 1U;
			array[(int)num] = b;
			if (this.uint_0 >= this.uint_2)
			{
				this.method_3();
			}
		}

		// Token: 0x06000033 RID: 51 RVA: 0x0000FE90 File Offset: 0x0000E090
		internal byte method_6(uint distance)
		{
			uint num = this.uint_0 - distance - 1U;
			if (num >= this.uint_2)
			{
				num += this.uint_2;
			}
			return this.byte_0[(int)num];
		}

		// Token: 0x06000034 RID: 52 RVA: 0x0000619C File Offset: 0x0000439C
		internal Class4()
		{
		}

		// Token: 0x04000028 RID: 40
		internal byte[] byte_0;

		// Token: 0x04000029 RID: 41
		internal uint uint_0;

		// Token: 0x0400002A RID: 42
		internal Stream stream_0;

		// Token: 0x0400002B RID: 43
		internal uint uint_1;

		// Token: 0x0400002C RID: 44
		internal uint uint_2;
	}

	// Token: 0x0200000A RID: 10
	internal struct Struct3
	{
		// Token: 0x06000035 RID: 53 RVA: 0x000062D8 File Offset: 0x000044D8
		internal void method_0()
		{
			this.uint_0 = 0U;
		}

		// Token: 0x06000036 RID: 54 RVA: 0x000062E1 File Offset: 0x000044E1
		internal void method_1()
		{
			if (this.uint_0 < 4U)
			{
				this.uint_0 = 0U;
				return;
			}
			if (this.uint_0 < 10U)
			{
				this.uint_0 -= 3U;
				return;
			}
			this.uint_0 -= 6U;
		}

		// Token: 0x06000037 RID: 55 RVA: 0x0000631B File Offset: 0x0000451B
		internal void method_2()
		{
			this.uint_0 = ((this.uint_0 < 7U) ? 7U : 10U);
		}

		// Token: 0x06000038 RID: 56 RVA: 0x00006331 File Offset: 0x00004531
		internal void method_3()
		{
			this.uint_0 = ((this.uint_0 < 7U) ? 8U : 11U);
		}

		// Token: 0x06000039 RID: 57 RVA: 0x00006347 File Offset: 0x00004547
		internal void method_4()
		{
			this.uint_0 = ((this.uint_0 < 7U) ? 9U : 11U);
		}

		// Token: 0x0600003A RID: 58 RVA: 0x0000635E File Offset: 0x0000455E
		internal bool method_5()
		{
			return this.uint_0 < 7U;
		}

		// Token: 0x0400002D RID: 45
		internal uint uint_0;
	}

	// Token: 0x0200000B RID: 11
	[StructLayout(LayoutKind.Explicit, Size = 16128)]
	internal struct Struct4
	{
	}

	// Token: 0x0200000C RID: 12
	[StructLayout(LayoutKind.Explicit, Pack = 1, Size = 448)]
	internal struct Struct5
	{
	}
}
